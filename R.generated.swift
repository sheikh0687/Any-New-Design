//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try font.validate()
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.color` struct is generated, and contains static references to 10 colors.
  struct color {
    /// Color `BG_COLOR`.
    static let bg_COLOR = Rswift.ColorResource(bundle: R.hostingBundle, name: "BG_COLOR")
    /// Color `BLACK`.
    static let blacK = Rswift.ColorResource(bundle: R.hostingBundle, name: "BLACK")
    /// Color `BORDER`.
    static let bordeR = Rswift.ColorResource(bundle: R.hostingBundle, name: "BORDER")
    /// Color `BUTTON_COLOR`.
    static let button_COLOR = Rswift.ColorResource(bundle: R.hostingBundle, name: "BUTTON_COLOR")
    /// Color `DARK_GREY`.
    static let dark_GREY = Rswift.ColorResource(bundle: R.hostingBundle, name: "DARK_GREY")
    /// Color `GREEN`.
    static let greeN = Rswift.ColorResource(bundle: R.hostingBundle, name: "GREEN")
    /// Color `LIGHTGRAY`.
    static let lightgraY = Rswift.ColorResource(bundle: R.hostingBundle, name: "LIGHTGRAY")
    /// Color `TEXTCOLOR`.
    static let textcoloR = Rswift.ColorResource(bundle: R.hostingBundle, name: "TEXTCOLOR")
    /// Color `THEME_COLOR`.
    static let theme_COLOR = Rswift.ColorResource(bundle: R.hostingBundle, name: "THEME_COLOR")
    /// Color `WHITE`.
    static let whitE = Rswift.ColorResource(bundle: R.hostingBundle, name: "WHITE")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "BG_COLOR", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func bg_COLOR(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.bg_COLOR, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "BLACK", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func blacK(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.blacK, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "BORDER", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func bordeR(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.bordeR, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "BUTTON_COLOR", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func button_COLOR(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.button_COLOR, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "DARK_GREY", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func dark_GREY(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.dark_GREY, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "GREEN", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func greeN(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.greeN, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "LIGHTGRAY", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func lightgraY(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.lightgraY, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "TEXTCOLOR", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func textcoloR(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.textcoloR, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "THEME_COLOR", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func theme_COLOR(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.theme_COLOR, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "WHITE", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func whitE(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.whitE, compatibleWith: traitCollection)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "BG_COLOR", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func bg_COLOR(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.bg_COLOR.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "BLACK", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func blacK(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.blacK.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "BORDER", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func bordeR(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.bordeR.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "BUTTON_COLOR", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func button_COLOR(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.button_COLOR.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "DARK_GREY", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func dark_GREY(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.dark_GREY.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "GREEN", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func greeN(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.greeN.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "LIGHTGRAY", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func lightgraY(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.lightgraY.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "TEXTCOLOR", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func textcoloR(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.textcoloR.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "THEME_COLOR", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func theme_COLOR(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.theme_COLOR.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "WHITE", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func whitE(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.whitE.name)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.entitlements` struct is generated, and contains static references to 1 properties.
  struct entitlements {
    static let apsEnvironment = infoPlistString(path: [], key: "aps-environment") ?? "development"

    fileprivate init() {}
  }

  /// This `R.file` struct is generated, and contains static references to 20 files.
  struct file {
    /// Resource file `Apache License.txt`.
    static let apacheLicenseTxt = Rswift.FileResource(bundle: R.hostingBundle, name: "Apache License", pathExtension: "txt")
    /// Resource file `GoogleService-Info.plist`.
    static let googleServiceInfoPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "GoogleService-Info", pathExtension: "plist")
    /// Resource file `Roboto-Black.ttf`.
    static let robotoBlackTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Roboto-Black", pathExtension: "ttf")
    /// Resource file `Roboto-BlackItalic.ttf`.
    static let robotoBlackItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Roboto-BlackItalic", pathExtension: "ttf")
    /// Resource file `Roboto-Bold.ttf`.
    static let robotoBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Roboto-Bold", pathExtension: "ttf")
    /// Resource file `Roboto-BoldItalic.ttf`.
    static let robotoBoldItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Roboto-BoldItalic", pathExtension: "ttf")
    /// Resource file `Roboto-Italic.ttf`.
    static let robotoItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Roboto-Italic", pathExtension: "ttf")
    /// Resource file `Roboto-Light.ttf`.
    static let robotoLightTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Roboto-Light", pathExtension: "ttf")
    /// Resource file `Roboto-LightItalic.ttf`.
    static let robotoLightItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Roboto-LightItalic", pathExtension: "ttf")
    /// Resource file `Roboto-Medium.ttf`.
    static let robotoMediumTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Roboto-Medium", pathExtension: "ttf")
    /// Resource file `Roboto-MediumItalic.ttf`.
    static let robotoMediumItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Roboto-MediumItalic", pathExtension: "ttf")
    /// Resource file `Roboto-Regular.ttf`.
    static let robotoRegularTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Roboto-Regular", pathExtension: "ttf")
    /// Resource file `Roboto-Thin.ttf`.
    static let robotoThinTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Roboto-Thin", pathExtension: "ttf")
    /// Resource file `Roboto-ThinItalic.ttf`.
    static let robotoThinItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Roboto-ThinItalic", pathExtension: "ttf")
    /// Resource file `RobotoCondensed-Bold.ttf`.
    static let robotoCondensedBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "RobotoCondensed-Bold", pathExtension: "ttf")
    /// Resource file `RobotoCondensed-BoldItalic.ttf`.
    static let robotoCondensedBoldItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "RobotoCondensed-BoldItalic", pathExtension: "ttf")
    /// Resource file `RobotoCondensed-Italic.ttf`.
    static let robotoCondensedItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "RobotoCondensed-Italic", pathExtension: "ttf")
    /// Resource file `RobotoCondensed-Light.ttf`.
    static let robotoCondensedLightTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "RobotoCondensed-Light", pathExtension: "ttf")
    /// Resource file `RobotoCondensed-LightItalic.ttf`.
    static let robotoCondensedLightItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "RobotoCondensed-LightItalic", pathExtension: "ttf")
    /// Resource file `RobotoCondensed-Regular.ttf`.
    static let robotoCondensedRegularTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "RobotoCondensed-Regular", pathExtension: "ttf")

    /// `bundle.url(forResource: "Apache License", withExtension: "txt")`
    static func apacheLicenseTxt(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.apacheLicenseTxt
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "GoogleService-Info", withExtension: "plist")`
    static func googleServiceInfoPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.googleServiceInfoPlist
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Roboto-Black", withExtension: "ttf")`
    static func robotoBlackTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.robotoBlackTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Roboto-BlackItalic", withExtension: "ttf")`
    static func robotoBlackItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.robotoBlackItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Roboto-Bold", withExtension: "ttf")`
    static func robotoBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.robotoBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Roboto-BoldItalic", withExtension: "ttf")`
    static func robotoBoldItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.robotoBoldItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Roboto-Italic", withExtension: "ttf")`
    static func robotoItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.robotoItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Roboto-Light", withExtension: "ttf")`
    static func robotoLightTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.robotoLightTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Roboto-LightItalic", withExtension: "ttf")`
    static func robotoLightItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.robotoLightItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Roboto-Medium", withExtension: "ttf")`
    static func robotoMediumTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.robotoMediumTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Roboto-MediumItalic", withExtension: "ttf")`
    static func robotoMediumItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.robotoMediumItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Roboto-Regular", withExtension: "ttf")`
    static func robotoRegularTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.robotoRegularTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Roboto-Thin", withExtension: "ttf")`
    static func robotoThinTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.robotoThinTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Roboto-ThinItalic", withExtension: "ttf")`
    static func robotoThinItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.robotoThinItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "RobotoCondensed-Bold", withExtension: "ttf")`
    static func robotoCondensedBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.robotoCondensedBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "RobotoCondensed-BoldItalic", withExtension: "ttf")`
    static func robotoCondensedBoldItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.robotoCondensedBoldItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "RobotoCondensed-Italic", withExtension: "ttf")`
    static func robotoCondensedItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.robotoCondensedItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "RobotoCondensed-Light", withExtension: "ttf")`
    static func robotoCondensedLightTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.robotoCondensedLightTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "RobotoCondensed-LightItalic", withExtension: "ttf")`
    static func robotoCondensedLightItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.robotoCondensedLightItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "RobotoCondensed-Regular", withExtension: "ttf")`
    static func robotoCondensedRegularTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.robotoCondensedRegularTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.font` struct is generated, and contains static references to 18 fonts.
  struct font: Rswift.Validatable {
    /// Font `Roboto-BlackItalic`.
    static let robotoBlackItalic = Rswift.FontResource(fontName: "Roboto-BlackItalic")
    /// Font `Roboto-Black`.
    static let robotoBlack = Rswift.FontResource(fontName: "Roboto-Black")
    /// Font `Roboto-BoldItalic`.
    static let robotoBoldItalic = Rswift.FontResource(fontName: "Roboto-BoldItalic")
    /// Font `Roboto-Bold`.
    static let robotoBold = Rswift.FontResource(fontName: "Roboto-Bold")
    /// Font `Roboto-Italic`.
    static let robotoItalic = Rswift.FontResource(fontName: "Roboto-Italic")
    /// Font `Roboto-LightItalic`.
    static let robotoLightItalic = Rswift.FontResource(fontName: "Roboto-LightItalic")
    /// Font `Roboto-Light`.
    static let robotoLight = Rswift.FontResource(fontName: "Roboto-Light")
    /// Font `Roboto-MediumItalic`.
    static let robotoMediumItalic = Rswift.FontResource(fontName: "Roboto-MediumItalic")
    /// Font `Roboto-Medium`.
    static let robotoMedium = Rswift.FontResource(fontName: "Roboto-Medium")
    /// Font `Roboto-Regular`.
    static let robotoRegular = Rswift.FontResource(fontName: "Roboto-Regular")
    /// Font `Roboto-ThinItalic`.
    static let robotoThinItalic = Rswift.FontResource(fontName: "Roboto-ThinItalic")
    /// Font `Roboto-Thin`.
    static let robotoThin = Rswift.FontResource(fontName: "Roboto-Thin")
    /// Font `RobotoCondensed-BoldItalic`.
    static let robotoCondensedBoldItalic = Rswift.FontResource(fontName: "RobotoCondensed-BoldItalic")
    /// Font `RobotoCondensed-Bold`.
    static let robotoCondensedBold = Rswift.FontResource(fontName: "RobotoCondensed-Bold")
    /// Font `RobotoCondensed-Italic`.
    static let robotoCondensedItalic = Rswift.FontResource(fontName: "RobotoCondensed-Italic")
    /// Font `RobotoCondensed-LightItalic`.
    static let robotoCondensedLightItalic = Rswift.FontResource(fontName: "RobotoCondensed-LightItalic")
    /// Font `RobotoCondensed-Light`.
    static let robotoCondensedLight = Rswift.FontResource(fontName: "RobotoCondensed-Light")
    /// Font `RobotoCondensed-Regular`.
    static let robotoCondensedRegular = Rswift.FontResource(fontName: "RobotoCondensed-Regular")

    /// `UIFont(name: "Roboto-Black", size: ...)`
    static func robotoBlack(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: robotoBlack, size: size)
    }

    /// `UIFont(name: "Roboto-BlackItalic", size: ...)`
    static func robotoBlackItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: robotoBlackItalic, size: size)
    }

    /// `UIFont(name: "Roboto-Bold", size: ...)`
    static func robotoBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: robotoBold, size: size)
    }

    /// `UIFont(name: "Roboto-BoldItalic", size: ...)`
    static func robotoBoldItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: robotoBoldItalic, size: size)
    }

    /// `UIFont(name: "Roboto-Italic", size: ...)`
    static func robotoItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: robotoItalic, size: size)
    }

    /// `UIFont(name: "Roboto-Light", size: ...)`
    static func robotoLight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: robotoLight, size: size)
    }

    /// `UIFont(name: "Roboto-LightItalic", size: ...)`
    static func robotoLightItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: robotoLightItalic, size: size)
    }

    /// `UIFont(name: "Roboto-Medium", size: ...)`
    static func robotoMedium(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: robotoMedium, size: size)
    }

    /// `UIFont(name: "Roboto-MediumItalic", size: ...)`
    static func robotoMediumItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: robotoMediumItalic, size: size)
    }

    /// `UIFont(name: "Roboto-Regular", size: ...)`
    static func robotoRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: robotoRegular, size: size)
    }

    /// `UIFont(name: "Roboto-Thin", size: ...)`
    static func robotoThin(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: robotoThin, size: size)
    }

    /// `UIFont(name: "Roboto-ThinItalic", size: ...)`
    static func robotoThinItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: robotoThinItalic, size: size)
    }

    /// `UIFont(name: "RobotoCondensed-Bold", size: ...)`
    static func robotoCondensedBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: robotoCondensedBold, size: size)
    }

    /// `UIFont(name: "RobotoCondensed-BoldItalic", size: ...)`
    static func robotoCondensedBoldItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: robotoCondensedBoldItalic, size: size)
    }

    /// `UIFont(name: "RobotoCondensed-Italic", size: ...)`
    static func robotoCondensedItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: robotoCondensedItalic, size: size)
    }

    /// `UIFont(name: "RobotoCondensed-Light", size: ...)`
    static func robotoCondensedLight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: robotoCondensedLight, size: size)
    }

    /// `UIFont(name: "RobotoCondensed-LightItalic", size: ...)`
    static func robotoCondensedLightItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: robotoCondensedLightItalic, size: size)
    }

    /// `UIFont(name: "RobotoCondensed-Regular", size: ...)`
    static func robotoCondensedRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: robotoCondensedRegular, size: size)
    }

    static func validate() throws {
      if R.font.robotoBlack(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Roboto-Black' could not be loaded, is 'Roboto-Black.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.robotoBlackItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Roboto-BlackItalic' could not be loaded, is 'Roboto-BlackItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.robotoBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Roboto-Bold' could not be loaded, is 'Roboto-Bold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.robotoBoldItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Roboto-BoldItalic' could not be loaded, is 'Roboto-BoldItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.robotoItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Roboto-Italic' could not be loaded, is 'Roboto-Italic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.robotoLight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Roboto-Light' could not be loaded, is 'Roboto-Light.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.robotoLightItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Roboto-LightItalic' could not be loaded, is 'Roboto-LightItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.robotoMedium(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Roboto-Medium' could not be loaded, is 'Roboto-Medium.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.robotoMediumItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Roboto-MediumItalic' could not be loaded, is 'Roboto-MediumItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.robotoRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Roboto-Regular' could not be loaded, is 'Roboto-Regular.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.robotoThin(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Roboto-Thin' could not be loaded, is 'Roboto-Thin.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.robotoThinItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Roboto-ThinItalic' could not be loaded, is 'Roboto-ThinItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.robotoCondensedBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'RobotoCondensed-Bold' could not be loaded, is 'RobotoCondensed-Bold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.robotoCondensedBoldItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'RobotoCondensed-BoldItalic' could not be loaded, is 'RobotoCondensed-BoldItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.robotoCondensedItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'RobotoCondensed-Italic' could not be loaded, is 'RobotoCondensed-Italic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.robotoCondensedLight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'RobotoCondensed-Light' could not be loaded, is 'RobotoCondensed-Light.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.robotoCondensedLightItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'RobotoCondensed-LightItalic' could not be loaded, is 'RobotoCondensed-LightItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.robotoCondensedRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'RobotoCondensed-Regular' could not be loaded, is 'RobotoCondensed-Regular.ttf' added to the UIAppFonts array in this targets Info.plist?") }
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 334 images.
  struct image {
    /// Image `Accepted`.
    static let accepted = Rswift.ImageResource(bundle: R.hostingBundle, name: "Accepted")
    /// Image `Back 2`.
    static let back2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Back 2")
    /// Image `BackArrow`.
    static let backArrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "BackArrow")
    /// Image `BlueCirclecheck `.
    static let blueCirclecheck = Rswift.ImageResource(bundle: R.hostingBundle, name: "BlueCirclecheck ")
    /// Image `Booking`.
    static let booking = Rswift.ImageResource(bundle: R.hostingBundle, name: "Booking")
    /// Image `Busines`.
    static let busines = Rswift.ImageResource(bundle: R.hostingBundle, name: "Busines")
    /// Image `CircleUncheck`.
    static let circleUncheck = Rswift.ImageResource(bundle: R.hostingBundle, name: "CircleUncheck")
    /// Image `Close Booking`.
    static let closeBooking = Rswift.ImageResource(bundle: R.hostingBundle, name: "Close Booking")
    /// Image `Country`.
    static let country = Rswift.ImageResource(bundle: R.hostingBundle, name: "Country")
    /// Image `Dollar`.
    static let dollar = Rswift.ImageResource(bundle: R.hostingBundle, name: "Dollar")
    /// Image `Ellipse 11`.
    static let ellipse11 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Ellipse 11")
    /// Image `Ellipse 9`.
    static let ellipse9 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Ellipse 9")
    /// Image `Employers`.
    static let employers = Rswift.ImageResource(bundle: R.hostingBundle, name: "Employers")
    /// Image `Frame 4`.
    static let frame4 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Frame 4")
    /// Image `Frame 5`.
    static let frame5 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Frame 5")
    /// Image `Frame 6`.
    static let frame6 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Frame 6")
    /// Image `Full`.
    static let full = Rswift.ImageResource(bundle: R.hostingBundle, name: "Full")
    /// Image `Group 67`.
    static let group67 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Group 67")
    /// Image `Group 68`.
    static let group68 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Group 68")
    /// Image `Group 69`.
    static let group69 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Group 69")
    /// Image `Group 70`.
    static let group70 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Group 70")
    /// Image `Group 71`.
    static let group71 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Group 71")
    /// Image `Group 72`.
    static let group72 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Group 72")
    /// Image `Group 74`.
    static let group74 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Group 74")
    /// Image `Group 75`.
    static let group75 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Group 75")
    /// Image `Group 9`.
    static let group9 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Group 9")
    /// Image `Home1`.
    static let home1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Home1")
    /// Image `Jonathan`.
    static let jonathan = Rswift.ImageResource(bundle: R.hostingBundle, name: "Jonathan")
    /// Image `List View`.
    static let listView = Rswift.ImageResource(bundle: R.hostingBundle, name: "List View")
    /// Image `Password`.
    static let password = Rswift.ImageResource(bundle: R.hostingBundle, name: "Password")
    /// Image `Pending`.
    static let pending = Rswift.ImageResource(bundle: R.hostingBundle, name: "Pending")
    /// Image `Plus18`.
    static let plus18 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Plus18")
    /// Image `Profile_Pla`.
    static let profile_Pla = Rswift.ImageResource(bundle: R.hostingBundle, name: "Profile_Pla")
    /// Image `Profile_c`.
    static let profile_c = Rswift.ImageResource(bundle: R.hostingBundle, name: "Profile_c")
    /// Image `RectangleChecked`.
    static let rectangleChecked = Rswift.ImageResource(bundle: R.hostingBundle, name: "RectangleChecked")
    /// Image `RectangleUncheck`.
    static let rectangleUncheck = Rswift.ImageResource(bundle: R.hostingBundle, name: "RectangleUncheck")
    /// Image `Req1`.
    static let req1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Req1")
    /// Image `Req`.
    static let req = Rswift.ImageResource(bundle: R.hostingBundle, name: "Req")
    /// Image `Reviews`.
    static let reviews = Rswift.ImageResource(bundle: R.hostingBundle, name: "Reviews")
    /// Image `Sign Out`.
    static let signOut = Rswift.ImageResource(bundle: R.hostingBundle, name: "Sign Out")
    /// Image `Uncheck`.
    static let uncheck = Rswift.ImageResource(bundle: R.hostingBundle, name: "Uncheck")
    /// Image `Update Profile`.
    static let updateProfile = Rswift.ImageResource(bundle: R.hostingBundle, name: "Update Profile")
    /// Image `Workers`.
    static let workers = Rswift.ImageResource(bundle: R.hostingBundle, name: "Workers")
    /// Image `about`.
    static let about = Rswift.ImageResource(bundle: R.hostingBundle, name: "about")
    /// Image `account`.
    static let account = Rswift.ImageResource(bundle: R.hostingBundle, name: "account")
    /// Image `addcardic`.
    static let addcardic = Rswift.ImageResource(bundle: R.hostingBundle, name: "addcardic")
    /// Image `addres`.
    static let addres = Rswift.ImageResource(bundle: R.hostingBundle, name: "addres")
    /// Image `americanexpress`.
    static let americanexpress = Rswift.ImageResource(bundle: R.hostingBundle, name: "americanexpress")
    /// Image `amountss`.
    static let amountss = Rswift.ImageResource(bundle: R.hostingBundle, name: "amountss")
    /// Image `arrow_right`.
    static let arrow_right = Rswift.ImageResource(bundle: R.hostingBundle, name: "arrow_right")
    /// Image `authorisedapprvar`.
    static let authorisedapprvar = Rswift.ImageResource(bundle: R.hostingBundle, name: "authorisedapprvar")
    /// Image `back`.
    static let back = Rswift.ImageResource(bundle: R.hostingBundle, name: "back")
    /// Image `backround1`.
    static let backround1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "backround1")
    /// Image `backround`.
    static let backround = Rswift.ImageResource(bundle: R.hostingBundle, name: "backround")
    /// Image `badge`.
    static let badge = Rswift.ImageResource(bundle: R.hostingBundle, name: "badge")
    /// Image `bag_white`.
    static let bag_white = Rswift.ImageResource(bundle: R.hostingBundle, name: "bag_white")
    /// Image `barber`.
    static let barber = Rswift.ImageResource(bundle: R.hostingBundle, name: "barber")
    /// Image `barberback`.
    static let barberback = Rswift.ImageResource(bundle: R.hostingBundle, name: "barberback")
    /// Image `barbermarker`.
    static let barbermarker = Rswift.ImageResource(bundle: R.hostingBundle, name: "barbermarker")
    /// Image `barberstore`.
    static let barberstore = Rswift.ImageResource(bundle: R.hostingBundle, name: "barberstore")
    /// Image `bell`.
    static let bell = Rswift.ImageResource(bundle: R.hostingBundle, name: "bell")
    /// Image `bgapp`.
    static let bgapp = Rswift.ImageResource(bundle: R.hostingBundle, name: "bgapp")
    /// Image `blackwishlist`.
    static let blackwishlist = Rswift.ImageResource(bundle: R.hostingBundle, name: "blackwishlist")
    /// Image `blue check 3`.
    static let blueCheck3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "blue check 3")
    /// Image `blue_rectangle`.
    static let blue_rectangle = Rswift.ImageResource(bundle: R.hostingBundle, name: "blue_rectangle")
    /// Image `booking_active`.
    static let booking_active = Rswift.ImageResource(bundle: R.hostingBundle, name: "booking_active")
    /// Image `booking_back`.
    static let booking_back = Rswift.ImageResource(bundle: R.hostingBundle, name: "booking_back")
    /// Image `booking_deactive`.
    static let booking_deactive = Rswift.ImageResource(bundle: R.hostingBundle, name: "booking_deactive")
    /// Image `bookinglist_back`.
    static let bookinglist_back = Rswift.ImageResource(bundle: R.hostingBundle, name: "bookinglist_back")
    /// Image `boximg`.
    static let boximg = Rswift.ImageResource(bundle: R.hostingBundle, name: "boximg")
    /// Image `call_black`.
    static let call_black = Rswift.ImageResource(bundle: R.hostingBundle, name: "call_black")
    /// Image `camera1`.
    static let camera1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "camera1")
    /// Image `camera`.
    static let camera = Rswift.ImageResource(bundle: R.hostingBundle, name: "camera")
    /// Image `cancel 3`.
    static let cancel3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "cancel 3")
    /// Image `cancelRed`.
    static let cancelRed = Rswift.ImageResource(bundle: R.hostingBundle, name: "cancelRed")
    /// Image `cancel_black`.
    static let cancel_black = Rswift.ImageResource(bundle: R.hostingBundle, name: "cancel_black")
    /// Image `car_img`.
    static let car_img = Rswift.ImageResource(bundle: R.hostingBundle, name: "car_img")
    /// Image `card2`.
    static let card2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "card2")
    /// Image `cardsel`.
    static let cardsel = Rswift.ImageResource(bundle: R.hostingBundle, name: "cardsel")
    /// Image `carfromabove`.
    static let carfromabove = Rswift.ImageResource(bundle: R.hostingBundle, name: "carfromabove")
    /// Image `cash_unsel`.
    static let cash_unsel = Rswift.ImageResource(bundle: R.hostingBundle, name: "cash_unsel")
    /// Image `cash`.
    static let cash = Rswift.ImageResource(bundle: R.hostingBundle, name: "cash")
    /// Image `catic`.
    static let catic = Rswift.ImageResource(bundle: R.hostingBundle, name: "catic")
    /// Image `cdar`.
    static let cdar = Rswift.ImageResource(bundle: R.hostingBundle, name: "cdar")
    /// Image `chat_active`.
    static let chat_active = Rswift.ImageResource(bundle: R.hostingBundle, name: "chat_active")
    /// Image `chat_b21`.
    static let chat_b21 = Rswift.ImageResource(bundle: R.hostingBundle, name: "chat_b21")
    /// Image `chat_b2`.
    static let chat_b2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "chat_b2")
    /// Image `chat_deactive`.
    static let chat_deactive = Rswift.ImageResource(bundle: R.hostingBundle, name: "chat_deactive")
    /// Image `chat`.
    static let chat = Rswift.ImageResource(bundle: R.hostingBundle, name: "chat")
    /// Image `check-green 2`.
    static let checkGreen2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "check-green 2")
    /// Image `check01`.
    static let check01 = Rswift.ImageResource(bundle: R.hostingBundle, name: "check01")
    /// Image `check02`.
    static let check02 = Rswift.ImageResource(bundle: R.hostingBundle, name: "check02")
    /// Image `check1`.
    static let check1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "check1")
    /// Image `check2`.
    static let check2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "check2")
    /// Image `check`.
    static let check = Rswift.ImageResource(bundle: R.hostingBundle, name: "check")
    /// Image `checkcircle`.
    static let checkcircle = Rswift.ImageResource(bundle: R.hostingBundle, name: "checkcircle")
    /// Image `checkedD`.
    static let checkedD = Rswift.ImageResource(bundle: R.hostingBundle, name: "checkedD")
    /// Image `checkimg`.
    static let checkimg = Rswift.ImageResource(bundle: R.hostingBundle, name: "checkimg")
    /// Image `circle`.
    static let circle = Rswift.ImageResource(bundle: R.hostingBundle, name: "circle")
    /// Image `comment`.
    static let comment = Rswift.ImageResource(bundle: R.hostingBundle, name: "comment")
    /// Image `cong`.
    static let cong = Rswift.ImageResource(bundle: R.hostingBundle, name: "cong")
    /// Image `countries`.
    static let countries = Rswift.ImageResource(bundle: R.hostingBundle, name: "countries")
    /// Image `credit_card`.
    static let credit_card = Rswift.ImageResource(bundle: R.hostingBundle, name: "credit_card")
    /// Image `credit`.
    static let credit = Rswift.ImageResource(bundle: R.hostingBundle, name: "credit")
    /// Image `customer-service`.
    static let customerService = Rswift.ImageResource(bundle: R.hostingBundle, name: "customer-service")
    /// Image `customer`.
    static let customer = Rswift.ImageResource(bundle: R.hostingBundle, name: "customer")
    /// Image `customerservice`.
    static let customerservice = Rswift.ImageResource(bundle: R.hostingBundle, name: "customerservice")
    /// Image `cycling`.
    static let cycling = Rswift.ImageResource(bundle: R.hostingBundle, name: "cycling")
    /// Image `darroe`.
    static let darroe = Rswift.ImageResource(bundle: R.hostingBundle, name: "darroe")
    /// Image `dateic`.
    static let dateic = Rswift.ImageResource(bundle: R.hostingBundle, name: "dateic")
    /// Image `ddddddd`.
    static let ddddddd = Rswift.ImageResource(bundle: R.hostingBundle, name: "ddddddd")
    /// Image `delete_ic`.
    static let delete_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "delete_ic")
    /// Image `deliverybike`.
    static let deliverybike = Rswift.ImageResource(bundle: R.hostingBundle, name: "deliverybike")
    /// Image `deliverytruck`.
    static let deliverytruck = Rswift.ImageResource(bundle: R.hostingBundle, name: "deliverytruck")
    /// Image `distancemarker`.
    static let distancemarker = Rswift.ImageResource(bundle: R.hostingBundle, name: "distancemarker")
    /// Image `dot`.
    static let dot = Rswift.ImageResource(bundle: R.hostingBundle, name: "dot")
    /// Image `down1`.
    static let down1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "down1")
    /// Image `down`.
    static let down = Rswift.ImageResource(bundle: R.hostingBundle, name: "down")
    /// Image `downarrow`.
    static let downarrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "downarrow")
    /// Image `drawer_icon`.
    static let drawer_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "drawer_icon")
    /// Image `driver1`.
    static let driver1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "driver1")
    /// Image `driver`.
    static let driver = Rswift.ImageResource(bundle: R.hostingBundle, name: "driver")
    /// Image `drop_marker`.
    static let drop_marker = Rswift.ImageResource(bundle: R.hostingBundle, name: "drop_marker")
    /// Image `dropdrown`.
    static let dropdrown = Rswift.ImageResource(bundle: R.hostingBundle, name: "dropdrown")
    /// Image `dummy_user`.
    static let dummy_user = Rswift.ImageResource(bundle: R.hostingBundle, name: "dummy_user")
    /// Image `earning_active`.
    static let earning_active = Rswift.ImageResource(bundle: R.hostingBundle, name: "earning_active")
    /// Image `earning_deactive`.
    static let earning_deactive = Rswift.ImageResource(bundle: R.hostingBundle, name: "earning_deactive")
    /// Image `edit_ic`.
    static let edit_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "edit_ic")
    /// Image `edit_new`.
    static let edit_new = Rswift.ImageResource(bundle: R.hostingBundle, name: "edit_new")
    /// Image `edit`.
    static let edit = Rswift.ImageResource(bundle: R.hostingBundle, name: "edit")
    /// Image `employee 1 1`.
    static let employee11 = Rswift.ImageResource(bundle: R.hostingBundle, name: "employee 1 1")
    /// Image `employee 3 1`.
    static let employee31 = Rswift.ImageResource(bundle: R.hostingBundle, name: "employee 3 1")
    /// Image `facebook`.
    static let facebook = Rswift.ImageResource(bundle: R.hostingBundle, name: "facebook")
    /// Image `faq`.
    static let faq = Rswift.ImageResource(bundle: R.hostingBundle, name: "faq")
    /// Image `fav_active`.
    static let fav_active = Rswift.ImageResource(bundle: R.hostingBundle, name: "fav_active")
    /// Image `fav_add`.
    static let fav_add = Rswift.ImageResource(bundle: R.hostingBundle, name: "fav_add")
    /// Image `fav_deactive`.
    static let fav_deactive = Rswift.ImageResource(bundle: R.hostingBundle, name: "fav_deactive")
    /// Image `fav`.
    static let fav = Rswift.ImageResource(bundle: R.hostingBundle, name: "fav")
    /// Image `favdriver`.
    static let favdriver = Rswift.ImageResource(bundle: R.hostingBundle, name: "favdriver")
    /// Image `favusers`.
    static let favusers = Rswift.ImageResource(bundle: R.hostingBundle, name: "favusers")
    /// Image `feed_active`.
    static let feed_active = Rswift.ImageResource(bundle: R.hostingBundle, name: "feed_active")
    /// Image `feed_deactive`.
    static let feed_deactive = Rswift.ImageResource(bundle: R.hostingBundle, name: "feed_deactive")
    /// Image `feedback`.
    static let feedback = Rswift.ImageResource(bundle: R.hostingBundle, name: "feedback")
    /// Image `filter_ic`.
    static let filter_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "filter_ic")
    /// Image `financail1`.
    static let financail1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "financail1")
    /// Image `financail`.
    static let financail = Rswift.ImageResource(bundle: R.hostingBundle, name: "financail")
    /// Image `findbuddy_active`.
    static let findbuddy_active = Rswift.ImageResource(bundle: R.hostingBundle, name: "findbuddy_active")
    /// Image `findbuddy_deactive`.
    static let findbuddy_deactive = Rswift.ImageResource(bundle: R.hostingBundle, name: "findbuddy_deactive")
    /// Image `fitmarket_active`.
    static let fitmarket_active = Rswift.ImageResource(bundle: R.hostingBundle, name: "fitmarket_active")
    /// Image `fitmarket_deactive`.
    static let fitmarket_deactive = Rswift.ImageResource(bundle: R.hostingBundle, name: "fitmarket_deactive")
    /// Image `forward`.
    static let forward = Rswift.ImageResource(bundle: R.hostingBundle, name: "forward")
    /// Image `friends`.
    static let friends = Rswift.ImageResource(bundle: R.hostingBundle, name: "friends")
    /// Image `gall_im1`.
    static let gall_im1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "gall_im1")
    /// Image `getdrop_driver`.
    static let getdrop_driver = Rswift.ImageResource(bundle: R.hostingBundle, name: "getdrop_driver")
    /// Image `getdrop_user`.
    static let getdrop_user = Rswift.ImageResource(bundle: R.hostingBundle, name: "getdrop_user")
    /// Image `google`.
    static let google = Rswift.ImageResource(bundle: R.hostingBundle, name: "google")
    /// Image `green check 1`.
    static let greenCheck1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "green check 1")
    /// Image `green check 2`.
    static let greenCheck2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "green check 2")
    /// Image `green_circle`.
    static let green_circle = Rswift.ImageResource(bundle: R.hostingBundle, name: "green_circle")
    /// Image `green_pin`.
    static let green_pin = Rswift.ImageResource(bundle: R.hostingBundle, name: "green_pin")
    /// Image `grey_cancel`.
    static let grey_cancel = Rswift.ImageResource(bundle: R.hostingBundle, name: "grey_cancel")
    /// Image `grey_right`.
    static let grey_right = Rswift.ImageResource(bundle: R.hostingBundle, name: "grey_right")
    /// Image `greychat`.
    static let greychat = Rswift.ImageResource(bundle: R.hostingBundle, name: "greychat")
    /// Image `hairdie`.
    static let hairdie = Rswift.ImageResource(bundle: R.hostingBundle, name: "hairdie")
    /// Image `hairdresser`.
    static let hairdresser = Rswift.ImageResource(bundle: R.hostingBundle, name: "hairdresser")
    /// Image `head`.
    static let head = Rswift.ImageResource(bundle: R.hostingBundle, name: "head")
    /// Image `heart_dislike`.
    static let heart_dislike = Rswift.ImageResource(bundle: R.hostingBundle, name: "heart_dislike")
    /// Image `heart_like`.
    static let heart_like = Rswift.ImageResource(bundle: R.hostingBundle, name: "heart_like")
    /// Image `helpandsupport`.
    static let helpandsupport = Rswift.ImageResource(bundle: R.hostingBundle, name: "helpandsupport")
    /// Image `history 1`.
    static let history1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "history 1")
    /// Image `history 2`.
    static let history2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "history 2")
    /// Image `home_deactive`.
    static let home_deactive = Rswift.ImageResource(bundle: R.hostingBundle, name: "home_deactive")
    /// Image `homeback`.
    static let homeback = Rswift.ImageResource(bundle: R.hostingBundle, name: "homeback")
    /// Image `house`.
    static let house = Rswift.ImageResource(bundle: R.hostingBundle, name: "house")
    /// Image `ic_back`.
    static let ic_back = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_back")
    /// Image `ic_parcel`.
    static let ic_parcel = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_parcel")
    /// Image `ic_phone_black`.
    static let ic_phone_black = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_phone_black")
    /// Image `instagram`.
    static let instagram = Rswift.ImageResource(bundle: R.hostingBundle, name: "instagram")
    /// Image `itemimage`.
    static let itemimage = Rswift.ImageResource(bundle: R.hostingBundle, name: "itemimage")
    /// Image `je pic 1`.
    static let jePic1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "je pic 1")
    /// Image `job`.
    static let job = Rswift.ImageResource(bundle: R.hostingBundle, name: "job")
    /// Image `journal_activity`.
    static let journal_activity = Rswift.ImageResource(bundle: R.hostingBundle, name: "journal_activity")
    /// Image `language`.
    static let language = Rswift.ImageResource(bundle: R.hostingBundle, name: "language")
    /// Image `like`.
    static let like = Rswift.ImageResource(bundle: R.hostingBundle, name: "like")
    /// Image `listing`.
    static let listing = Rswift.ImageResource(bundle: R.hostingBundle, name: "listing")
    /// Image `location_active`.
    static let location_active = Rswift.ImageResource(bundle: R.hostingBundle, name: "location_active")
    /// Image `location_pin`.
    static let location_pin = Rswift.ImageResource(bundle: R.hostingBundle, name: "location_pin")
    /// Image `locationic`.
    static let locationic = Rswift.ImageResource(bundle: R.hostingBundle, name: "locationic")
    /// Image `loclogo`.
    static let loclogo = Rswift.ImageResource(bundle: R.hostingBundle, name: "loclogo")
    /// Image `loginback`.
    static let loginback = Rswift.ImageResource(bundle: R.hostingBundle, name: "loginback")
    /// Image `logo_new`.
    static let logo_new = Rswift.ImageResource(bundle: R.hostingBundle, name: "logo_new")
    /// Image `logo`.
    static let logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "logo")
    /// Image `logout 1`.
    static let logout1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "logout 1")
    /// Image `logout_icc`.
    static let logout_icc = Rswift.ImageResource(bundle: R.hostingBundle, name: "logout_icc")
    /// Image `logout`.
    static let logout = Rswift.ImageResource(bundle: R.hostingBundle, name: "logout")
    /// Image `masar_textlogo`.
    static let masar_textlogo = Rswift.ImageResource(bundle: R.hostingBundle, name: "masar_textlogo")
    /// Image `mastercard`.
    static let mastercard = Rswift.ImageResource(bundle: R.hostingBundle, name: "mastercard")
    /// Image `members`.
    static let members = Rswift.ImageResource(bundle: R.hostingBundle, name: "members")
    /// Image `menu 2`.
    static let menu2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "menu 2")
    /// Image `menu_horizontal`.
    static let menu_horizontal = Rswift.ImageResource(bundle: R.hostingBundle, name: "menu_horizontal")
    /// Image `menu_vertical`.
    static let menu_vertical = Rswift.ImageResource(bundle: R.hostingBundle, name: "menu_vertical")
    /// Image `menu`.
    static let menu = Rswift.ImageResource(bundle: R.hostingBundle, name: "menu")
    /// Image `message_sel`.
    static let message_sel = Rswift.ImageResource(bundle: R.hostingBundle, name: "message_sel")
    /// Image `message`.
    static let message = Rswift.ImageResource(bundle: R.hostingBundle, name: "message")
    /// Image `messages`.
    static let messages = Rswift.ImageResource(bundle: R.hostingBundle, name: "messages")
    /// Image `mini`.
    static let mini = Rswift.ImageResource(bundle: R.hostingBundle, name: "mini")
    /// Image `minus circle 2`.
    static let minusCircle2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "minus circle 2")
    /// Image `minus_box`.
    static let minus_box = Rswift.ImageResource(bundle: R.hostingBundle, name: "minus_box")
    /// Image `mobile`.
    static let mobile = Rswift.ImageResource(bundle: R.hostingBundle, name: "mobile")
    /// Image `mobileround`.
    static let mobileround = Rswift.ImageResource(bundle: R.hostingBundle, name: "mobileround")
    /// Image `my_filter (1)`.
    static let my_filter1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "my_filter (1)")
    /// Image `myfav`.
    static let myfav = Rswift.ImageResource(bundle: R.hostingBundle, name: "myfav")
    /// Image `myfeed`.
    static let myfeed = Rswift.ImageResource(bundle: R.hostingBundle, name: "myfeed")
    /// Image `mypost`.
    static let mypost = Rswift.ImageResource(bundle: R.hostingBundle, name: "mypost")
    /// Image `near_barber`.
    static let near_barber = Rswift.ImageResource(bundle: R.hostingBundle, name: "near_barber")
    /// Image `nearbuddy`.
    static let nearbuddy = Rswift.ImageResource(bundle: R.hostingBundle, name: "nearbuddy")
    /// Image `nearme`.
    static let nearme = Rswift.ImageResource(bundle: R.hostingBundle, name: "nearme")
    /// Image `no_product`.
    static let no_product = Rswift.ImageResource(bundle: R.hostingBundle, name: "no_product")
    /// Image `nobooking`.
    static let nobooking = Rswift.ImageResource(bundle: R.hostingBundle, name: "nobooking")
    /// Image `noti_color`.
    static let noti_color = Rswift.ImageResource(bundle: R.hostingBundle, name: "noti_color")
    /// Image `noti_plan`.
    static let noti_plan = Rswift.ImageResource(bundle: R.hostingBundle, name: "noti_plan")
    /// Image `notification_bell`.
    static let notification_bell = Rswift.ImageResource(bundle: R.hostingBundle, name: "notification_bell")
    /// Image `notificationcol`.
    static let notificationcol = Rswift.ImageResource(bundle: R.hostingBundle, name: "notificationcol")
    /// Image `notifications`.
    static let notifications = Rswift.ImageResource(bundle: R.hostingBundle, name: "notifications")
    /// Image `notiii`.
    static let notiii = Rswift.ImageResource(bundle: R.hostingBundle, name: "notiii")
    /// Image `open1`.
    static let open1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "open1")
    /// Image `orangebutton`.
    static let orangebutton = Rswift.ImageResource(bundle: R.hostingBundle, name: "orangebutton")
    /// Image `orrange_border_button`.
    static let orrange_border_button = Rswift.ImageResource(bundle: R.hostingBundle, name: "orrange_border_button")
    /// Image `otp 1`.
    static let otp1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "otp 1")
    /// Image `outletadmin`.
    static let outletadmin = Rswift.ImageResource(bundle: R.hostingBundle, name: "outletadmin")
    /// Image `padlock 1`.
    static let padlock1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "padlock 1")
    /// Image `padlock`.
    static let padlock = Rswift.ImageResource(bundle: R.hostingBundle, name: "padlock")
    /// Image `pencil 5`.
    static let pencil5 = Rswift.ImageResource(bundle: R.hostingBundle, name: "pencil 5")
    /// Image `pencil`.
    static let pencil = Rswift.ImageResource(bundle: R.hostingBundle, name: "pencil")
    /// Image `phone`.
    static let phone = Rswift.ImageResource(bundle: R.hostingBundle, name: "phone")
    /// Image `pick_marker`.
    static let pick_marker = Rswift.ImageResource(bundle: R.hostingBundle, name: "pick_marker")
    /// Image `pin (1) 1`.
    static let pin11 = Rswift.ImageResource(bundle: R.hostingBundle, name: "pin (1) 1")
    /// Image `pin`.
    static let pin = Rswift.ImageResource(bundle: R.hostingBundle, name: "pin")
    /// Image `placeholder1`.
    static let placeholder1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "placeholder1")
    /// Image `placeholder_2`.
    static let placeholder_2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "placeholder_2")
    /// Image `placeholder`.
    static let placeholder = Rswift.ImageResource(bundle: R.hostingBundle, name: "placeholder")
    /// Image `plus circle 1`.
    static let plusCircle1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "plus circle 1")
    /// Image `plus_box`.
    static let plus_box = Rswift.ImageResource(bundle: R.hostingBundle, name: "plus_box")
    /// Image `plus`.
    static let plus = Rswift.ImageResource(bundle: R.hostingBundle, name: "plus")
    /// Image `post_img`.
    static let post_img = Rswift.ImageResource(bundle: R.hostingBundle, name: "post_img")
    /// Image `privacy 1`.
    static let privacy1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "privacy 1")
    /// Image `profile_active`.
    static let profile_active = Rswift.ImageResource(bundle: R.hostingBundle, name: "profile_active")
    /// Image `profile_deactive`.
    static let profile_deactive = Rswift.ImageResource(bundle: R.hostingBundle, name: "profile_deactive")
    /// Image `profile_ic`.
    static let profile_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "profile_ic")
    /// Image `profile_user`.
    static let profile_user = Rswift.ImageResource(bundle: R.hostingBundle, name: "profile_user")
    /// Image `red_circle`.
    static let red_circle = Rswift.ImageResource(bundle: R.hostingBundle, name: "red_circle")
    /// Image `refer 1`.
    static let refer1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "refer 1")
    /// Image `referfriend`.
    static let referfriend = Rswift.ImageResource(bundle: R.hostingBundle, name: "referfriend")
    /// Image `request_active`.
    static let request_active = Rswift.ImageResource(bundle: R.hostingBundle, name: "request_active")
    /// Image `request_deactive`.
    static let request_deactive = Rswift.ImageResource(bundle: R.hostingBundle, name: "request_deactive")
    /// Image `ride_ic`.
    static let ride_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "ride_ic")
    /// Image `right-arrow (1) 1`.
    static let rightArrow11 = Rswift.ImageResource(bundle: R.hostingBundle, name: "right-arrow (1) 1")
    /// Image `right-arrow (1) 2`.
    static let rightArrow12 = Rswift.ImageResource(bundle: R.hostingBundle, name: "right-arrow (1) 2")
    /// Image `right-arrow (1) 3`.
    static let rightArrow13 = Rswift.ImageResource(bundle: R.hostingBundle, name: "right-arrow (1) 3")
    /// Image `rightArrow`.
    static let rightArrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "rightArrow")
    /// Image `ripple_img`.
    static let ripple_img = Rswift.ImageResource(bundle: R.hostingBundle, name: "ripple_img")
    /// Image `salonmarker`.
    static let salonmarker = Rswift.ImageResource(bundle: R.hostingBundle, name: "salonmarker")
    /// Image `saloon_2`.
    static let saloon_2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "saloon_2")
    /// Image `saloon_img`.
    static let saloon_img = Rswift.ImageResource(bundle: R.hostingBundle, name: "saloon_img")
    /// Image `saloonback`.
    static let saloonback = Rswift.ImageResource(bundle: R.hostingBundle, name: "saloonback")
    /// Image `saving`.
    static let saving = Rswift.ImageResource(bundle: R.hostingBundle, name: "saving")
    /// Image `search 4`.
    static let search4 = Rswift.ImageResource(bundle: R.hostingBundle, name: "search 4")
    /// Image `search_grey`.
    static let search_grey = Rswift.ImageResource(bundle: R.hostingBundle, name: "search_grey")
    /// Image `search_icon`.
    static let search_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "search_icon")
    /// Image `search_white`.
    static let search_white = Rswift.ImageResource(bundle: R.hostingBundle, name: "search_white")
    /// Image `send-message 1`.
    static let sendMessage1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "send-message 1")
    /// Image `sendmessage`.
    static let sendmessage = Rswift.ImageResource(bundle: R.hostingBundle, name: "sendmessage")
    /// Image `service_active`.
    static let service_active = Rswift.ImageResource(bundle: R.hostingBundle, name: "service_active")
    /// Image `service_deactive`.
    static let service_deactive = Rswift.ImageResource(bundle: R.hostingBundle, name: "service_deactive")
    /// Image `serviceimg`.
    static let serviceimg = Rswift.ImageResource(bundle: R.hostingBundle, name: "serviceimg")
    /// Image `setshift`.
    static let setshift = Rswift.ImageResource(bundle: R.hostingBundle, name: "setshift")
    /// Image `setuprate`.
    static let setuprate = Rswift.ImageResource(bundle: R.hostingBundle, name: "setuprate")
    /// Image `shampoo`.
    static let shampoo = Rswift.ImageResource(bundle: R.hostingBundle, name: "shampoo")
    /// Image `share1`.
    static let share1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "share1")
    /// Image `sharefriend`.
    static let sharefriend = Rswift.ImageResource(bundle: R.hostingBundle, name: "sharefriend")
    /// Image `shopping_cart`.
    static let shopping_cart = Rswift.ImageResource(bundle: R.hostingBundle, name: "shopping_cart")
    /// Image `sidemenu`.
    static let sidemenu = Rswift.ImageResource(bundle: R.hostingBundle, name: "sidemenu")
    /// Image `slidesearch`.
    static let slidesearch = Rswift.ImageResource(bundle: R.hostingBundle, name: "slidesearch")
    /// Image `slidewatch`.
    static let slidewatch = Rswift.ImageResource(bundle: R.hostingBundle, name: "slidewatch")
    /// Image `splash_back`.
    static let splash_back = Rswift.ImageResource(bundle: R.hostingBundle, name: "splash_back")
    /// Image `splash`.
    static let splash = Rswift.ImageResource(bundle: R.hostingBundle, name: "splash")
    /// Image `splashback`.
    static let splashback = Rswift.ImageResource(bundle: R.hostingBundle, name: "splashback")
    /// Image `splashcar`.
    static let splashcar = Rswift.ImageResource(bundle: R.hostingBundle, name: "splashcar")
    /// Image `star1`.
    static let star1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "star1")
    /// Image `starblnkbig`.
    static let starblnkbig = Rswift.ImageResource(bundle: R.hostingBundle, name: "starblnkbig")
    /// Image `starblnksml`.
    static let starblnksml = Rswift.ImageResource(bundle: R.hostingBundle, name: "starblnksml")
    /// Image `starcolbig`.
    static let starcolbig = Rswift.ImageResource(bundle: R.hostingBundle, name: "starcolbig")
    /// Image `starcolsml`.
    static let starcolsml = Rswift.ImageResource(bundle: R.hostingBundle, name: "starcolsml")
    /// Image `subscribe`.
    static let subscribe = Rswift.ImageResource(bundle: R.hostingBundle, name: "subscribe")
    /// Image `subscription`.
    static let subscription = Rswift.ImageResource(bundle: R.hostingBundle, name: "subscription")
    /// Image `suitcase (1) copy 1`.
    static let suitcase1Copy1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "suitcase (1) copy 1")
    /// Image `taxi`.
    static let taxi = Rswift.ImageResource(bundle: R.hostingBundle, name: "taxi")
    /// Image `terms-and-conditions 1`.
    static let termsAndConditions1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "terms-and-conditions 1")
    /// Image `tick`.
    static let tick = Rswift.ImageResource(bundle: R.hostingBundle, name: "tick")
    /// Image `time`.
    static let time = Rswift.ImageResource(bundle: R.hostingBundle, name: "time")
    /// Image `transections`.
    static let transections = Rswift.ImageResource(bundle: R.hostingBundle, name: "transections")
    /// Image `unchecked`.
    static let unchecked = Rswift.ImageResource(bundle: R.hostingBundle, name: "unchecked")
    /// Image `uncheckk`.
    static let uncheckk = Rswift.ImageResource(bundle: R.hostingBundle, name: "uncheckk")
    /// Image `unfav24`.
    static let unfav24 = Rswift.ImageResource(bundle: R.hostingBundle, name: "unfav24")
    /// Image `unfav`.
    static let unfav = Rswift.ImageResource(bundle: R.hostingBundle, name: "unfav")
    /// Image `unlike`.
    static let unlike = Rswift.ImageResource(bundle: R.hostingBundle, name: "unlike")
    /// Image `unselectitem`.
    static let unselectitem = Rswift.ImageResource(bundle: R.hostingBundle, name: "unselectitem")
    /// Image `uparrow`.
    static let uparrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "uparrow")
    /// Image `upload_image`.
    static let upload_image = Rswift.ImageResource(bundle: R.hostingBundle, name: "upload_image")
    /// Image `upload_img`.
    static let upload_img = Rswift.ImageResource(bundle: R.hostingBundle, name: "upload_img")
    /// Image `user (1) 1`.
    static let user11 = Rswift.ImageResource(bundle: R.hostingBundle, name: "user (1) 1")
    /// Image `user_active`.
    static let user_active = Rswift.ImageResource(bundle: R.hostingBundle, name: "user_active")
    /// Image `user`.
    static let user = Rswift.ImageResource(bundle: R.hostingBundle, name: "user")
    /// Image `usermarker`.
    static let usermarker = Rswift.ImageResource(bundle: R.hostingBundle, name: "usermarker")
    /// Image `view_eye`.
    static let view_eye = Rswift.ImageResource(bundle: R.hostingBundle, name: "view_eye")
    /// Image `view`.
    static let view = Rswift.ImageResource(bundle: R.hostingBundle, name: "view")
    /// Image `visa`.
    static let visa = Rswift.ImageResource(bundle: R.hostingBundle, name: "visa")
    /// Image `waller1`.
    static let waller1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "waller1")
    /// Image `waller`.
    static let waller = Rswift.ImageResource(bundle: R.hostingBundle, name: "waller")
    /// Image `wallet-filled-money-tool 1`.
    static let walletFilledMoneyTool1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "wallet-filled-money-tool 1")
    /// Image `wallet-filled-money-tool 3`.
    static let walletFilledMoneyTool3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "wallet-filled-money-tool 3")
    /// Image `wallet-filled-money-tool 5`.
    static let walletFilledMoneyTool5 = Rswift.ImageResource(bundle: R.hostingBundle, name: "wallet-filled-money-tool 5")
    /// Image `wallet1`.
    static let wallet1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "wallet1")
    /// Image `wallet_active`.
    static let wallet_active = Rswift.ImageResource(bundle: R.hostingBundle, name: "wallet_active")
    /// Image `wallet_pro`.
    static let wallet_pro = Rswift.ImageResource(bundle: R.hostingBundle, name: "wallet_pro")
    /// Image `wallet_type_col`.
    static let wallet_type_col = Rswift.ImageResource(bundle: R.hostingBundle, name: "wallet_type_col")
    /// Image `wallet_unsel`.
    static let wallet_unsel = Rswift.ImageResource(bundle: R.hostingBundle, name: "wallet_unsel")
    /// Image `wallet_white`.
    static let wallet_white = Rswift.ImageResource(bundle: R.hostingBundle, name: "wallet_white")
    /// Image `watch`.
    static let watch = Rswift.ImageResource(bundle: R.hostingBundle, name: "watch")
    /// Image `wepay`.
    static let wepay = Rswift.ImageResource(bundle: R.hostingBundle, name: "wepay")
    /// Image `white_logo`.
    static let white_logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "white_logo")
    /// Image `white_rectangle`.
    static let white_rectangle = Rswift.ImageResource(bundle: R.hostingBundle, name: "white_rectangle")
    /// Image `wine-connection-suntec-city 2`.
    static let wineConnectionSuntecCity2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "wine-connection-suntec-city 2")
    /// Image `wishlist`.
    static let wishlist = Rswift.ImageResource(bundle: R.hostingBundle, name: "wishlist")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Accepted", bundle: ..., traitCollection: ...)`
    static func accepted(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.accepted, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Back 2", bundle: ..., traitCollection: ...)`
    static func back2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.back2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "BackArrow", bundle: ..., traitCollection: ...)`
    static func backArrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.backArrow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "BlueCirclecheck ", bundle: ..., traitCollection: ...)`
    static func blueCirclecheck(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.blueCirclecheck, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Booking", bundle: ..., traitCollection: ...)`
    static func booking(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.booking, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Busines", bundle: ..., traitCollection: ...)`
    static func busines(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.busines, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "CircleUncheck", bundle: ..., traitCollection: ...)`
    static func circleUncheck(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.circleUncheck, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Close Booking", bundle: ..., traitCollection: ...)`
    static func closeBooking(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.closeBooking, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Country", bundle: ..., traitCollection: ...)`
    static func country(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.country, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Dollar", bundle: ..., traitCollection: ...)`
    static func dollar(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dollar, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Ellipse 11", bundle: ..., traitCollection: ...)`
    static func ellipse11(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ellipse11, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Ellipse 9", bundle: ..., traitCollection: ...)`
    static func ellipse9(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ellipse9, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Employers", bundle: ..., traitCollection: ...)`
    static func employers(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.employers, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Frame 4", bundle: ..., traitCollection: ...)`
    static func frame4(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.frame4, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Frame 5", bundle: ..., traitCollection: ...)`
    static func frame5(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.frame5, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Frame 6", bundle: ..., traitCollection: ...)`
    static func frame6(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.frame6, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Full", bundle: ..., traitCollection: ...)`
    static func full(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.full, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Group 67", bundle: ..., traitCollection: ...)`
    static func group67(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.group67, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Group 68", bundle: ..., traitCollection: ...)`
    static func group68(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.group68, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Group 69", bundle: ..., traitCollection: ...)`
    static func group69(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.group69, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Group 70", bundle: ..., traitCollection: ...)`
    static func group70(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.group70, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Group 71", bundle: ..., traitCollection: ...)`
    static func group71(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.group71, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Group 72", bundle: ..., traitCollection: ...)`
    static func group72(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.group72, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Group 74", bundle: ..., traitCollection: ...)`
    static func group74(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.group74, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Group 75", bundle: ..., traitCollection: ...)`
    static func group75(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.group75, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Group 9", bundle: ..., traitCollection: ...)`
    static func group9(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.group9, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Home1", bundle: ..., traitCollection: ...)`
    static func home1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Jonathan", bundle: ..., traitCollection: ...)`
    static func jonathan(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.jonathan, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "List View", bundle: ..., traitCollection: ...)`
    static func listView(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.listView, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Password", bundle: ..., traitCollection: ...)`
    static func password(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.password, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Pending", bundle: ..., traitCollection: ...)`
    static func pending(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pending, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Plus18", bundle: ..., traitCollection: ...)`
    static func plus18(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.plus18, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Profile_Pla", bundle: ..., traitCollection: ...)`
    static func profile_Pla(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.profile_Pla, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Profile_c", bundle: ..., traitCollection: ...)`
    static func profile_c(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.profile_c, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "RectangleChecked", bundle: ..., traitCollection: ...)`
    static func rectangleChecked(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rectangleChecked, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "RectangleUncheck", bundle: ..., traitCollection: ...)`
    static func rectangleUncheck(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rectangleUncheck, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Req", bundle: ..., traitCollection: ...)`
    static func req(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.req, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Req1", bundle: ..., traitCollection: ...)`
    static func req1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.req1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Reviews", bundle: ..., traitCollection: ...)`
    static func reviews(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.reviews, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Sign Out", bundle: ..., traitCollection: ...)`
    static func signOut(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.signOut, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Uncheck", bundle: ..., traitCollection: ...)`
    static func uncheck(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.uncheck, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Update Profile", bundle: ..., traitCollection: ...)`
    static func updateProfile(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.updateProfile, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Workers", bundle: ..., traitCollection: ...)`
    static func workers(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.workers, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "about", bundle: ..., traitCollection: ...)`
    static func about(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.about, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "account", bundle: ..., traitCollection: ...)`
    static func account(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.account, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "addcardic", bundle: ..., traitCollection: ...)`
    static func addcardic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.addcardic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "addres", bundle: ..., traitCollection: ...)`
    static func addres(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.addres, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "americanexpress", bundle: ..., traitCollection: ...)`
    static func americanexpress(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.americanexpress, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "amountss", bundle: ..., traitCollection: ...)`
    static func amountss(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.amountss, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "arrow_right", bundle: ..., traitCollection: ...)`
    static func arrow_right(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arrow_right, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "authorisedapprvar", bundle: ..., traitCollection: ...)`
    static func authorisedapprvar(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.authorisedapprvar, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "back", bundle: ..., traitCollection: ...)`
    static func back(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.back, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "backround", bundle: ..., traitCollection: ...)`
    static func backround(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.backround, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "backround1", bundle: ..., traitCollection: ...)`
    static func backround1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.backround1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "badge", bundle: ..., traitCollection: ...)`
    static func badge(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.badge, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bag_white", bundle: ..., traitCollection: ...)`
    static func bag_white(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bag_white, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "barber", bundle: ..., traitCollection: ...)`
    static func barber(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.barber, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "barberback", bundle: ..., traitCollection: ...)`
    static func barberback(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.barberback, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "barbermarker", bundle: ..., traitCollection: ...)`
    static func barbermarker(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.barbermarker, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "barberstore", bundle: ..., traitCollection: ...)`
    static func barberstore(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.barberstore, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bell", bundle: ..., traitCollection: ...)`
    static func bell(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bell, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bgapp", bundle: ..., traitCollection: ...)`
    static func bgapp(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bgapp, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "blackwishlist", bundle: ..., traitCollection: ...)`
    static func blackwishlist(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.blackwishlist, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "blue check 3", bundle: ..., traitCollection: ...)`
    static func blueCheck3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.blueCheck3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "blue_rectangle", bundle: ..., traitCollection: ...)`
    static func blue_rectangle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.blue_rectangle, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "booking_active", bundle: ..., traitCollection: ...)`
    static func booking_active(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.booking_active, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "booking_back", bundle: ..., traitCollection: ...)`
    static func booking_back(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.booking_back, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "booking_deactive", bundle: ..., traitCollection: ...)`
    static func booking_deactive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.booking_deactive, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bookinglist_back", bundle: ..., traitCollection: ...)`
    static func bookinglist_back(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bookinglist_back, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "boximg", bundle: ..., traitCollection: ...)`
    static func boximg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.boximg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "call_black", bundle: ..., traitCollection: ...)`
    static func call_black(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.call_black, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "camera", bundle: ..., traitCollection: ...)`
    static func camera(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.camera, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "camera1", bundle: ..., traitCollection: ...)`
    static func camera1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.camera1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cancel 3", bundle: ..., traitCollection: ...)`
    static func cancel3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cancel3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cancelRed", bundle: ..., traitCollection: ...)`
    static func cancelRed(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cancelRed, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cancel_black", bundle: ..., traitCollection: ...)`
    static func cancel_black(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cancel_black, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "car_img", bundle: ..., traitCollection: ...)`
    static func car_img(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.car_img, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "card2", bundle: ..., traitCollection: ...)`
    static func card2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.card2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cardsel", bundle: ..., traitCollection: ...)`
    static func cardsel(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cardsel, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "carfromabove", bundle: ..., traitCollection: ...)`
    static func carfromabove(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.carfromabove, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cash", bundle: ..., traitCollection: ...)`
    static func cash(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cash, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cash_unsel", bundle: ..., traitCollection: ...)`
    static func cash_unsel(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cash_unsel, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "catic", bundle: ..., traitCollection: ...)`
    static func catic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.catic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cdar", bundle: ..., traitCollection: ...)`
    static func cdar(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cdar, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "chat", bundle: ..., traitCollection: ...)`
    static func chat(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.chat, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "chat_active", bundle: ..., traitCollection: ...)`
    static func chat_active(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.chat_active, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "chat_b2", bundle: ..., traitCollection: ...)`
    static func chat_b2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.chat_b2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "chat_b21", bundle: ..., traitCollection: ...)`
    static func chat_b21(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.chat_b21, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "chat_deactive", bundle: ..., traitCollection: ...)`
    static func chat_deactive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.chat_deactive, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "check", bundle: ..., traitCollection: ...)`
    static func check(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.check, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "check-green 2", bundle: ..., traitCollection: ...)`
    static func checkGreen2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.checkGreen2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "check01", bundle: ..., traitCollection: ...)`
    static func check01(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.check01, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "check02", bundle: ..., traitCollection: ...)`
    static func check02(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.check02, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "check1", bundle: ..., traitCollection: ...)`
    static func check1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.check1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "check2", bundle: ..., traitCollection: ...)`
    static func check2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.check2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "checkcircle", bundle: ..., traitCollection: ...)`
    static func checkcircle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.checkcircle, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "checkedD", bundle: ..., traitCollection: ...)`
    static func checkedD(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.checkedD, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "checkimg", bundle: ..., traitCollection: ...)`
    static func checkimg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.checkimg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "circle", bundle: ..., traitCollection: ...)`
    static func circle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.circle, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "comment", bundle: ..., traitCollection: ...)`
    static func comment(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.comment, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cong", bundle: ..., traitCollection: ...)`
    static func cong(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cong, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "countries", bundle: ..., traitCollection: ...)`
    static func countries(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.countries, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "credit", bundle: ..., traitCollection: ...)`
    static func credit(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.credit, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "credit_card", bundle: ..., traitCollection: ...)`
    static func credit_card(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.credit_card, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "customer", bundle: ..., traitCollection: ...)`
    static func customer(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.customer, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "customer-service", bundle: ..., traitCollection: ...)`
    static func customerService(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.customerService, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "customerservice", bundle: ..., traitCollection: ...)`
    static func customerservice(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.customerservice, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cycling", bundle: ..., traitCollection: ...)`
    static func cycling(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cycling, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "darroe", bundle: ..., traitCollection: ...)`
    static func darroe(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.darroe, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "dateic", bundle: ..., traitCollection: ...)`
    static func dateic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dateic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ddddddd", bundle: ..., traitCollection: ...)`
    static func ddddddd(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ddddddd, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "delete_ic", bundle: ..., traitCollection: ...)`
    static func delete_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.delete_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "deliverybike", bundle: ..., traitCollection: ...)`
    static func deliverybike(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.deliverybike, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "deliverytruck", bundle: ..., traitCollection: ...)`
    static func deliverytruck(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.deliverytruck, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "distancemarker", bundle: ..., traitCollection: ...)`
    static func distancemarker(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.distancemarker, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "dot", bundle: ..., traitCollection: ...)`
    static func dot(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dot, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "down", bundle: ..., traitCollection: ...)`
    static func down(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.down, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "down1", bundle: ..., traitCollection: ...)`
    static func down1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.down1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "downarrow", bundle: ..., traitCollection: ...)`
    static func downarrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.downarrow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "drawer_icon", bundle: ..., traitCollection: ...)`
    static func drawer_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.drawer_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "driver", bundle: ..., traitCollection: ...)`
    static func driver(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.driver, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "driver1", bundle: ..., traitCollection: ...)`
    static func driver1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.driver1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "drop_marker", bundle: ..., traitCollection: ...)`
    static func drop_marker(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.drop_marker, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "dropdrown", bundle: ..., traitCollection: ...)`
    static func dropdrown(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dropdrown, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "dummy_user", bundle: ..., traitCollection: ...)`
    static func dummy_user(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dummy_user, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "earning_active", bundle: ..., traitCollection: ...)`
    static func earning_active(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.earning_active, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "earning_deactive", bundle: ..., traitCollection: ...)`
    static func earning_deactive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.earning_deactive, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "edit", bundle: ..., traitCollection: ...)`
    static func edit(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.edit, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "edit_ic", bundle: ..., traitCollection: ...)`
    static func edit_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.edit_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "edit_new", bundle: ..., traitCollection: ...)`
    static func edit_new(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.edit_new, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "employee 1 1", bundle: ..., traitCollection: ...)`
    static func employee11(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.employee11, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "employee 3 1", bundle: ..., traitCollection: ...)`
    static func employee31(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.employee31, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "facebook", bundle: ..., traitCollection: ...)`
    static func facebook(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.facebook, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "faq", bundle: ..., traitCollection: ...)`
    static func faq(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.faq, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "fav", bundle: ..., traitCollection: ...)`
    static func fav(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fav, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "fav_active", bundle: ..., traitCollection: ...)`
    static func fav_active(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fav_active, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "fav_add", bundle: ..., traitCollection: ...)`
    static func fav_add(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fav_add, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "fav_deactive", bundle: ..., traitCollection: ...)`
    static func fav_deactive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fav_deactive, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "favdriver", bundle: ..., traitCollection: ...)`
    static func favdriver(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.favdriver, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "favusers", bundle: ..., traitCollection: ...)`
    static func favusers(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.favusers, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "feed_active", bundle: ..., traitCollection: ...)`
    static func feed_active(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.feed_active, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "feed_deactive", bundle: ..., traitCollection: ...)`
    static func feed_deactive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.feed_deactive, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "feedback", bundle: ..., traitCollection: ...)`
    static func feedback(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.feedback, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "filter_ic", bundle: ..., traitCollection: ...)`
    static func filter_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.filter_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "financail", bundle: ..., traitCollection: ...)`
    static func financail(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.financail, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "financail1", bundle: ..., traitCollection: ...)`
    static func financail1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.financail1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "findbuddy_active", bundle: ..., traitCollection: ...)`
    static func findbuddy_active(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.findbuddy_active, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "findbuddy_deactive", bundle: ..., traitCollection: ...)`
    static func findbuddy_deactive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.findbuddy_deactive, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "fitmarket_active", bundle: ..., traitCollection: ...)`
    static func fitmarket_active(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fitmarket_active, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "fitmarket_deactive", bundle: ..., traitCollection: ...)`
    static func fitmarket_deactive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fitmarket_deactive, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "forward", bundle: ..., traitCollection: ...)`
    static func forward(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.forward, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "friends", bundle: ..., traitCollection: ...)`
    static func friends(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.friends, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "gall_im1", bundle: ..., traitCollection: ...)`
    static func gall_im1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gall_im1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "getdrop_driver", bundle: ..., traitCollection: ...)`
    static func getdrop_driver(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.getdrop_driver, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "getdrop_user", bundle: ..., traitCollection: ...)`
    static func getdrop_user(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.getdrop_user, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "google", bundle: ..., traitCollection: ...)`
    static func google(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.google, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "green check 1", bundle: ..., traitCollection: ...)`
    static func greenCheck1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.greenCheck1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "green check 2", bundle: ..., traitCollection: ...)`
    static func greenCheck2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.greenCheck2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "green_circle", bundle: ..., traitCollection: ...)`
    static func green_circle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.green_circle, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "green_pin", bundle: ..., traitCollection: ...)`
    static func green_pin(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.green_pin, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "grey_cancel", bundle: ..., traitCollection: ...)`
    static func grey_cancel(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.grey_cancel, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "grey_right", bundle: ..., traitCollection: ...)`
    static func grey_right(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.grey_right, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "greychat", bundle: ..., traitCollection: ...)`
    static func greychat(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.greychat, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "hairdie", bundle: ..., traitCollection: ...)`
    static func hairdie(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.hairdie, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "hairdresser", bundle: ..., traitCollection: ...)`
    static func hairdresser(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.hairdresser, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "head", bundle: ..., traitCollection: ...)`
    static func head(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.head, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "heart_dislike", bundle: ..., traitCollection: ...)`
    static func heart_dislike(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.heart_dislike, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "heart_like", bundle: ..., traitCollection: ...)`
    static func heart_like(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.heart_like, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "helpandsupport", bundle: ..., traitCollection: ...)`
    static func helpandsupport(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.helpandsupport, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "history 1", bundle: ..., traitCollection: ...)`
    static func history1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.history1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "history 2", bundle: ..., traitCollection: ...)`
    static func history2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.history2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "home_deactive", bundle: ..., traitCollection: ...)`
    static func home_deactive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home_deactive, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "homeback", bundle: ..., traitCollection: ...)`
    static func homeback(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.homeback, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "house", bundle: ..., traitCollection: ...)`
    static func house(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.house, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_back", bundle: ..., traitCollection: ...)`
    static func ic_back(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_back, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_parcel", bundle: ..., traitCollection: ...)`
    static func ic_parcel(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_parcel, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_phone_black", bundle: ..., traitCollection: ...)`
    static func ic_phone_black(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_phone_black, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "instagram", bundle: ..., traitCollection: ...)`
    static func instagram(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.instagram, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "itemimage", bundle: ..., traitCollection: ...)`
    static func itemimage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.itemimage, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "je pic 1", bundle: ..., traitCollection: ...)`
    static func jePic1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.jePic1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "job", bundle: ..., traitCollection: ...)`
    static func job(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.job, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "journal_activity", bundle: ..., traitCollection: ...)`
    static func journal_activity(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.journal_activity, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "language", bundle: ..., traitCollection: ...)`
    static func language(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.language, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "like", bundle: ..., traitCollection: ...)`
    static func like(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.like, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "listing", bundle: ..., traitCollection: ...)`
    static func listing(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.listing, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "location_active", bundle: ..., traitCollection: ...)`
    static func location_active(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.location_active, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "location_pin", bundle: ..., traitCollection: ...)`
    static func location_pin(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.location_pin, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "locationic", bundle: ..., traitCollection: ...)`
    static func locationic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.locationic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "loclogo", bundle: ..., traitCollection: ...)`
    static func loclogo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.loclogo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "loginback", bundle: ..., traitCollection: ...)`
    static func loginback(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.loginback, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "logo", bundle: ..., traitCollection: ...)`
    static func logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "logo_new", bundle: ..., traitCollection: ...)`
    static func logo_new(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logo_new, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "logout 1", bundle: ..., traitCollection: ...)`
    static func logout1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logout1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "logout", bundle: ..., traitCollection: ...)`
    static func logout(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logout, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "logout_icc", bundle: ..., traitCollection: ...)`
    static func logout_icc(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logout_icc, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "masar_textlogo", bundle: ..., traitCollection: ...)`
    static func masar_textlogo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.masar_textlogo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "mastercard", bundle: ..., traitCollection: ...)`
    static func mastercard(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mastercard, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "members", bundle: ..., traitCollection: ...)`
    static func members(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.members, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "menu 2", bundle: ..., traitCollection: ...)`
    static func menu2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.menu2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "menu", bundle: ..., traitCollection: ...)`
    static func menu(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.menu, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "menu_horizontal", bundle: ..., traitCollection: ...)`
    static func menu_horizontal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.menu_horizontal, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "menu_vertical", bundle: ..., traitCollection: ...)`
    static func menu_vertical(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.menu_vertical, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "message", bundle: ..., traitCollection: ...)`
    static func message(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.message, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "message_sel", bundle: ..., traitCollection: ...)`
    static func message_sel(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.message_sel, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "messages", bundle: ..., traitCollection: ...)`
    static func messages(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.messages, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "mini", bundle: ..., traitCollection: ...)`
    static func mini(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mini, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "minus circle 2", bundle: ..., traitCollection: ...)`
    static func minusCircle2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.minusCircle2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "minus_box", bundle: ..., traitCollection: ...)`
    static func minus_box(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.minus_box, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "mobile", bundle: ..., traitCollection: ...)`
    static func mobile(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mobile, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "mobileround", bundle: ..., traitCollection: ...)`
    static func mobileround(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mobileround, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "my_filter (1)", bundle: ..., traitCollection: ...)`
    static func my_filter1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.my_filter1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "myfav", bundle: ..., traitCollection: ...)`
    static func myfav(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.myfav, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "myfeed", bundle: ..., traitCollection: ...)`
    static func myfeed(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.myfeed, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "mypost", bundle: ..., traitCollection: ...)`
    static func mypost(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mypost, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "near_barber", bundle: ..., traitCollection: ...)`
    static func near_barber(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.near_barber, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "nearbuddy", bundle: ..., traitCollection: ...)`
    static func nearbuddy(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.nearbuddy, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "nearme", bundle: ..., traitCollection: ...)`
    static func nearme(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.nearme, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "no_product", bundle: ..., traitCollection: ...)`
    static func no_product(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.no_product, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "nobooking", bundle: ..., traitCollection: ...)`
    static func nobooking(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.nobooking, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "noti_color", bundle: ..., traitCollection: ...)`
    static func noti_color(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.noti_color, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "noti_plan", bundle: ..., traitCollection: ...)`
    static func noti_plan(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.noti_plan, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "notification_bell", bundle: ..., traitCollection: ...)`
    static func notification_bell(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.notification_bell, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "notificationcol", bundle: ..., traitCollection: ...)`
    static func notificationcol(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.notificationcol, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "notifications", bundle: ..., traitCollection: ...)`
    static func notifications(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.notifications, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "notiii", bundle: ..., traitCollection: ...)`
    static func notiii(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.notiii, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "open1", bundle: ..., traitCollection: ...)`
    static func open1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.open1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "orangebutton", bundle: ..., traitCollection: ...)`
    static func orangebutton(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.orangebutton, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "orrange_border_button", bundle: ..., traitCollection: ...)`
    static func orrange_border_button(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.orrange_border_button, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "otp 1", bundle: ..., traitCollection: ...)`
    static func otp1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.otp1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "outletadmin", bundle: ..., traitCollection: ...)`
    static func outletadmin(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.outletadmin, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "padlock 1", bundle: ..., traitCollection: ...)`
    static func padlock1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.padlock1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "padlock", bundle: ..., traitCollection: ...)`
    static func padlock(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.padlock, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "pencil 5", bundle: ..., traitCollection: ...)`
    static func pencil5(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pencil5, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "pencil", bundle: ..., traitCollection: ...)`
    static func pencil(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pencil, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "phone", bundle: ..., traitCollection: ...)`
    static func phone(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.phone, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "pick_marker", bundle: ..., traitCollection: ...)`
    static func pick_marker(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pick_marker, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "pin (1) 1", bundle: ..., traitCollection: ...)`
    static func pin11(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pin11, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "pin", bundle: ..., traitCollection: ...)`
    static func pin(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pin, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "placeholder", bundle: ..., traitCollection: ...)`
    static func placeholder(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.placeholder, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "placeholder1", bundle: ..., traitCollection: ...)`
    static func placeholder1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.placeholder1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "placeholder_2", bundle: ..., traitCollection: ...)`
    static func placeholder_2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.placeholder_2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "plus circle 1", bundle: ..., traitCollection: ...)`
    static func plusCircle1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.plusCircle1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "plus", bundle: ..., traitCollection: ...)`
    static func plus(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.plus, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "plus_box", bundle: ..., traitCollection: ...)`
    static func plus_box(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.plus_box, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "post_img", bundle: ..., traitCollection: ...)`
    static func post_img(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.post_img, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "privacy 1", bundle: ..., traitCollection: ...)`
    static func privacy1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.privacy1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "profile_active", bundle: ..., traitCollection: ...)`
    static func profile_active(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.profile_active, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "profile_deactive", bundle: ..., traitCollection: ...)`
    static func profile_deactive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.profile_deactive, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "profile_ic", bundle: ..., traitCollection: ...)`
    static func profile_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.profile_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "profile_user", bundle: ..., traitCollection: ...)`
    static func profile_user(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.profile_user, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "red_circle", bundle: ..., traitCollection: ...)`
    static func red_circle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.red_circle, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "refer 1", bundle: ..., traitCollection: ...)`
    static func refer1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.refer1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "referfriend", bundle: ..., traitCollection: ...)`
    static func referfriend(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.referfriend, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "request_active", bundle: ..., traitCollection: ...)`
    static func request_active(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.request_active, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "request_deactive", bundle: ..., traitCollection: ...)`
    static func request_deactive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.request_deactive, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ride_ic", bundle: ..., traitCollection: ...)`
    static func ride_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ride_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "right-arrow (1) 1", bundle: ..., traitCollection: ...)`
    static func rightArrow11(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rightArrow11, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "right-arrow (1) 2", bundle: ..., traitCollection: ...)`
    static func rightArrow12(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rightArrow12, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "right-arrow (1) 3", bundle: ..., traitCollection: ...)`
    static func rightArrow13(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rightArrow13, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "rightArrow", bundle: ..., traitCollection: ...)`
    static func rightArrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rightArrow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ripple_img", bundle: ..., traitCollection: ...)`
    static func ripple_img(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ripple_img, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "salonmarker", bundle: ..., traitCollection: ...)`
    static func salonmarker(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.salonmarker, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "saloon_2", bundle: ..., traitCollection: ...)`
    static func saloon_2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.saloon_2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "saloon_img", bundle: ..., traitCollection: ...)`
    static func saloon_img(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.saloon_img, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "saloonback", bundle: ..., traitCollection: ...)`
    static func saloonback(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.saloonback, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "saving", bundle: ..., traitCollection: ...)`
    static func saving(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.saving, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "search 4", bundle: ..., traitCollection: ...)`
    static func search4(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.search4, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "search_grey", bundle: ..., traitCollection: ...)`
    static func search_grey(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.search_grey, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "search_icon", bundle: ..., traitCollection: ...)`
    static func search_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.search_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "search_white", bundle: ..., traitCollection: ...)`
    static func search_white(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.search_white, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "send-message 1", bundle: ..., traitCollection: ...)`
    static func sendMessage1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sendMessage1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sendmessage", bundle: ..., traitCollection: ...)`
    static func sendmessage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sendmessage, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "service_active", bundle: ..., traitCollection: ...)`
    static func service_active(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.service_active, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "service_deactive", bundle: ..., traitCollection: ...)`
    static func service_deactive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.service_deactive, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "serviceimg", bundle: ..., traitCollection: ...)`
    static func serviceimg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.serviceimg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "setshift", bundle: ..., traitCollection: ...)`
    static func setshift(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.setshift, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "setuprate", bundle: ..., traitCollection: ...)`
    static func setuprate(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.setuprate, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "shampoo", bundle: ..., traitCollection: ...)`
    static func shampoo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.shampoo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "share1", bundle: ..., traitCollection: ...)`
    static func share1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.share1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sharefriend", bundle: ..., traitCollection: ...)`
    static func sharefriend(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sharefriend, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "shopping_cart", bundle: ..., traitCollection: ...)`
    static func shopping_cart(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.shopping_cart, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sidemenu", bundle: ..., traitCollection: ...)`
    static func sidemenu(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sidemenu, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "slidesearch", bundle: ..., traitCollection: ...)`
    static func slidesearch(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.slidesearch, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "slidewatch", bundle: ..., traitCollection: ...)`
    static func slidewatch(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.slidewatch, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "splash", bundle: ..., traitCollection: ...)`
    static func splash(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.splash, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "splash_back", bundle: ..., traitCollection: ...)`
    static func splash_back(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.splash_back, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "splashback", bundle: ..., traitCollection: ...)`
    static func splashback(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.splashback, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "splashcar", bundle: ..., traitCollection: ...)`
    static func splashcar(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.splashcar, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "star1", bundle: ..., traitCollection: ...)`
    static func star1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.star1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "starblnkbig", bundle: ..., traitCollection: ...)`
    static func starblnkbig(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.starblnkbig, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "starblnksml", bundle: ..., traitCollection: ...)`
    static func starblnksml(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.starblnksml, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "starcolbig", bundle: ..., traitCollection: ...)`
    static func starcolbig(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.starcolbig, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "starcolsml", bundle: ..., traitCollection: ...)`
    static func starcolsml(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.starcolsml, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "subscribe", bundle: ..., traitCollection: ...)`
    static func subscribe(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.subscribe, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "subscription", bundle: ..., traitCollection: ...)`
    static func subscription(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.subscription, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "suitcase (1) copy 1", bundle: ..., traitCollection: ...)`
    static func suitcase1Copy1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.suitcase1Copy1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "taxi", bundle: ..., traitCollection: ...)`
    static func taxi(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.taxi, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "terms-and-conditions 1", bundle: ..., traitCollection: ...)`
    static func termsAndConditions1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.termsAndConditions1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tick", bundle: ..., traitCollection: ...)`
    static func tick(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tick, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "time", bundle: ..., traitCollection: ...)`
    static func time(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.time, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "transections", bundle: ..., traitCollection: ...)`
    static func transections(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.transections, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "unchecked", bundle: ..., traitCollection: ...)`
    static func unchecked(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.unchecked, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "uncheckk", bundle: ..., traitCollection: ...)`
    static func uncheckk(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.uncheckk, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "unfav", bundle: ..., traitCollection: ...)`
    static func unfav(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.unfav, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "unfav24", bundle: ..., traitCollection: ...)`
    static func unfav24(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.unfav24, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "unlike", bundle: ..., traitCollection: ...)`
    static func unlike(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.unlike, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "unselectitem", bundle: ..., traitCollection: ...)`
    static func unselectitem(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.unselectitem, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "uparrow", bundle: ..., traitCollection: ...)`
    static func uparrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.uparrow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "upload_image", bundle: ..., traitCollection: ...)`
    static func upload_image(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.upload_image, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "upload_img", bundle: ..., traitCollection: ...)`
    static func upload_img(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.upload_img, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "user (1) 1", bundle: ..., traitCollection: ...)`
    static func user11(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.user11, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "user", bundle: ..., traitCollection: ...)`
    static func user(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.user, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "user_active", bundle: ..., traitCollection: ...)`
    static func user_active(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.user_active, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "usermarker", bundle: ..., traitCollection: ...)`
    static func usermarker(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.usermarker, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "view", bundle: ..., traitCollection: ...)`
    static func view(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.view, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "view_eye", bundle: ..., traitCollection: ...)`
    static func view_eye(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.view_eye, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "visa", bundle: ..., traitCollection: ...)`
    static func visa(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.visa, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "waller", bundle: ..., traitCollection: ...)`
    static func waller(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.waller, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "waller1", bundle: ..., traitCollection: ...)`
    static func waller1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.waller1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "wallet-filled-money-tool 1", bundle: ..., traitCollection: ...)`
    static func walletFilledMoneyTool1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.walletFilledMoneyTool1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "wallet-filled-money-tool 3", bundle: ..., traitCollection: ...)`
    static func walletFilledMoneyTool3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.walletFilledMoneyTool3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "wallet-filled-money-tool 5", bundle: ..., traitCollection: ...)`
    static func walletFilledMoneyTool5(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.walletFilledMoneyTool5, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "wallet1", bundle: ..., traitCollection: ...)`
    static func wallet1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.wallet1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "wallet_active", bundle: ..., traitCollection: ...)`
    static func wallet_active(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.wallet_active, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "wallet_pro", bundle: ..., traitCollection: ...)`
    static func wallet_pro(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.wallet_pro, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "wallet_type_col", bundle: ..., traitCollection: ...)`
    static func wallet_type_col(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.wallet_type_col, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "wallet_unsel", bundle: ..., traitCollection: ...)`
    static func wallet_unsel(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.wallet_unsel, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "wallet_white", bundle: ..., traitCollection: ...)`
    static func wallet_white(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.wallet_white, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "watch", bundle: ..., traitCollection: ...)`
    static func watch(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.watch, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "wepay", bundle: ..., traitCollection: ...)`
    static func wepay(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.wepay, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "white_logo", bundle: ..., traitCollection: ...)`
    static func white_logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.white_logo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "white_rectangle", bundle: ..., traitCollection: ...)`
    static func white_rectangle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.white_rectangle, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "wine-connection-suntec-city 2", bundle: ..., traitCollection: ...)`
    static func wineConnectionSuntecCity2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.wineConnectionSuntecCity2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "wishlist", bundle: ..., traitCollection: ...)`
    static func wishlist(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.wishlist, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.nib` struct is generated, and contains static references to 19 nibs.
  struct nib {
    /// Nib `AllJobTypeCell`.
    static let allJobTypeCell = _R.nib._AllJobTypeCell()
    /// Nib `BookingCell`.
    static let bookingCell = _R.nib._BookingCell()
    /// Nib `ClientListCell`.
    static let clientListCell = _R.nib._ClientListCell()
    /// Nib `CurrentShiftCell`.
    static let currentShiftCell = _R.nib._CurrentShiftCell()
    /// Nib `DateCalCell`.
    static let dateCalCell = _R.nib._DateCalCell()
    /// Nib `DateCollectionCell`.
    static let dateCollectionCell = _R.nib._DateCollectionCell()
    /// Nib `DateWiseCell`.
    static let dateWiseCell = _R.nib._DateWiseCell()
    /// Nib `JobRequestCell`.
    static let jobRequestCell = _R.nib._JobRequestCell()
    /// Nib `ManpowerCell`.
    static let manpowerCell = _R.nib._ManpowerCell()
    /// Nib `MultiDateCell`.
    static let multiDateCell = _R.nib._MultiDateCell()
    /// Nib `PreviousWorkerCell`.
    static let previousWorkerCell = _R.nib._PreviousWorkerCell()
    /// Nib `SaveCardCell`.
    static let saveCardCell = _R.nib._SaveCardCell()
    /// Nib `ShiftCell`.
    static let shiftCell = _R.nib._ShiftCell()
    /// Nib `SubShiftCell`.
    static let subShiftCell = _R.nib._SubShiftCell()
    /// Nib `TopBar`.
    static let topBar = _R.nib._TopBar()
    /// Nib `UpcomingShiftCell`.
    static let upcomingShiftCell = _R.nib._UpcomingShiftCell()
    /// Nib `UserRatingCell`.
    static let userRatingCell = _R.nib._UserRatingCell()
    /// Nib `WeeklyRateCell`.
    static let weeklyRateCell = _R.nib._WeeklyRateCell()
    /// Nib `WorkerShiftTimeCell`.
    static let workerShiftTimeCell = _R.nib._WorkerShiftTimeCell()

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "AllJobTypeCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.allJobTypeCell) instead")
    static func allJobTypeCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.allJobTypeCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "BookingCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.bookingCell) instead")
    static func bookingCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.bookingCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ClientListCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.clientListCell) instead")
    static func clientListCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.clientListCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "CurrentShiftCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.currentShiftCell) instead")
    static func currentShiftCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.currentShiftCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "DateCalCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.dateCalCell) instead")
    static func dateCalCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.dateCalCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "DateCollectionCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.dateCollectionCell) instead")
    static func dateCollectionCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.dateCollectionCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "DateWiseCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.dateWiseCell) instead")
    static func dateWiseCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.dateWiseCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "JobRequestCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.jobRequestCell) instead")
    static func jobRequestCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.jobRequestCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ManpowerCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.manpowerCell) instead")
    static func manpowerCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.manpowerCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "MultiDateCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.multiDateCell) instead")
    static func multiDateCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.multiDateCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PreviousWorkerCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.previousWorkerCell) instead")
    static func previousWorkerCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.previousWorkerCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SaveCardCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.saveCardCell) instead")
    static func saveCardCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.saveCardCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ShiftCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.shiftCell) instead")
    static func shiftCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.shiftCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SubShiftCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.subShiftCell) instead")
    static func subShiftCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.subShiftCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "TopBar", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.topBar) instead")
    static func topBar(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.topBar)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "UpcomingShiftCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.upcomingShiftCell) instead")
    static func upcomingShiftCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.upcomingShiftCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "UserRatingCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.userRatingCell) instead")
    static func userRatingCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.userRatingCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "WeeklyRateCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.weeklyRateCell) instead")
    static func weeklyRateCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.weeklyRateCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "WorkerShiftTimeCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.workerShiftTimeCell) instead")
    static func workerShiftTimeCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.workerShiftTimeCell)
    }
    #endif

    static func allJobTypeCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AllJobTypeCell? {
      return R.nib.allJobTypeCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AllJobTypeCell
    }

    static func bookingCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> BookingCell? {
      return R.nib.bookingCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? BookingCell
    }

    static func clientListCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ClientListCell? {
      return R.nib.clientListCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ClientListCell
    }

    static func currentShiftCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CurrentShiftCell? {
      return R.nib.currentShiftCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CurrentShiftCell
    }

    static func dateCalCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> DateCalCell? {
      return R.nib.dateCalCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? DateCalCell
    }

    static func dateCollectionCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> DateCollectionCell? {
      return R.nib.dateCollectionCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? DateCollectionCell
    }

    static func dateWiseCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> DateWiseCell? {
      return R.nib.dateWiseCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? DateWiseCell
    }

    static func jobRequestCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> JobRequestCell? {
      return R.nib.jobRequestCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? JobRequestCell
    }

    static func manpowerCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ManpowerCell? {
      return R.nib.manpowerCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ManpowerCell
    }

    static func multiDateCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MultiDateCell? {
      return R.nib.multiDateCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MultiDateCell
    }

    static func previousWorkerCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PreviousWorkerCell? {
      return R.nib.previousWorkerCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PreviousWorkerCell
    }

    static func saveCardCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SaveCardCell? {
      return R.nib.saveCardCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SaveCardCell
    }

    static func shiftCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ShiftCell? {
      return R.nib.shiftCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ShiftCell
    }

    static func subShiftCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SubShiftCell? {
      return R.nib.subShiftCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SubShiftCell
    }

    static func topBar(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TopBar? {
      return R.nib.topBar.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TopBar
    }

    static func upcomingShiftCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UpcomingShiftCell? {
      return R.nib.upcomingShiftCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UpcomingShiftCell
    }

    static func userRatingCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UserRatingCell? {
      return R.nib.userRatingCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UserRatingCell
    }

    static func weeklyRateCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> WeeklyRateCell? {
      return R.nib.weeklyRateCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? WeeklyRateCell
    }

    static func workerShiftTimeCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> WorkerShiftTimeCell? {
      return R.nib.workerShiftTimeCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? WorkerShiftTimeCell
    }

    fileprivate init() {}
  }

  /// This `R.reuseIdentifier` struct is generated, and contains static references to 17 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `AllJobTypeCell`.
    static let allJobTypeCell: Rswift.ReuseIdentifier<AllJobTypeCell> = Rswift.ReuseIdentifier(identifier: "AllJobTypeCell")
    /// Reuse identifier `BookingCell`.
    static let bookingCell: Rswift.ReuseIdentifier<BookingCell> = Rswift.ReuseIdentifier(identifier: "BookingCell")
    /// Reuse identifier `ClientListCell`.
    static let clientListCell: Rswift.ReuseIdentifier<ClientListCell> = Rswift.ReuseIdentifier(identifier: "ClientListCell")
    /// Reuse identifier `ConversationCell`.
    static let conversationCell: Rswift.ReuseIdentifier<ConversationCell> = Rswift.ReuseIdentifier(identifier: "ConversationCell")
    /// Reuse identifier `CurrentShiftCell`.
    static let currentShiftCell: Rswift.ReuseIdentifier<CurrentShiftCell> = Rswift.ReuseIdentifier(identifier: "CurrentShiftCell")
    /// Reuse identifier `DateCalCell`.
    static let dateCalCell: Rswift.ReuseIdentifier<DateCalCell> = Rswift.ReuseIdentifier(identifier: "DateCalCell")
    /// Reuse identifier `DateCollectionCell`.
    static let dateCollectionCell: Rswift.ReuseIdentifier<DateCollectionCell> = Rswift.ReuseIdentifier(identifier: "DateCollectionCell")
    /// Reuse identifier `DateWiseCell`.
    static let dateWiseCell: Rswift.ReuseIdentifier<DateWiseCell> = Rswift.ReuseIdentifier(identifier: "DateWiseCell")
    /// Reuse identifier `JobRequestCell`.
    static let jobRequestCell: Rswift.ReuseIdentifier<JobRequestCell> = Rswift.ReuseIdentifier(identifier: "JobRequestCell")
    /// Reuse identifier `LandingCell`.
    static let landingCell: Rswift.ReuseIdentifier<LandingCell> = Rswift.ReuseIdentifier(identifier: "LandingCell")
    /// Reuse identifier `ManpowerCell`.
    static let manpowerCell: Rswift.ReuseIdentifier<ManpowerCell> = Rswift.ReuseIdentifier(identifier: "ManpowerCell")
    /// Reuse identifier `MultiDateCell`.
    static let multiDateCell: Rswift.ReuseIdentifier<MultiDateCell> = Rswift.ReuseIdentifier(identifier: "MultiDateCell")
    /// Reuse identifier `PreviousWorkerCell`.
    static let previousWorkerCell: Rswift.ReuseIdentifier<PreviousWorkerCell> = Rswift.ReuseIdentifier(identifier: "PreviousWorkerCell")
    /// Reuse identifier `SaveCardCell`.
    static let saveCardCell: Rswift.ReuseIdentifier<SaveCardCell> = Rswift.ReuseIdentifier(identifier: "SaveCardCell")
    /// Reuse identifier `ShiftCell`.
    static let shiftCell: Rswift.ReuseIdentifier<ShiftCell> = Rswift.ReuseIdentifier(identifier: "ShiftCell")
    /// Reuse identifier `UserRatingCell`.
    static let userRatingCell: Rswift.ReuseIdentifier<UserRatingCell> = Rswift.ReuseIdentifier(identifier: "UserRatingCell")
    /// Reuse identifier `WorkerShiftTimeCell`.
    static let workerShiftTimeCell: Rswift.ReuseIdentifier<WorkerShiftTimeCell> = Rswift.ReuseIdentifier(identifier: "WorkerShiftTimeCell")

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try nib.validate()
    #endif
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _AllJobTypeCell.validate()
      try _BookingCell.validate()
      try _ClientListCell.validate()
      try _CurrentShiftCell.validate()
      try _DateCollectionCell.validate()
      try _ManpowerCell.validate()
      try _MultiDateCell.validate()
      try _PreviousWorkerCell.validate()
      try _SubShiftCell.validate()
      try _TopBar.validate()
      try _UserRatingCell.validate()
      try _WeeklyRateCell.validate()
    }

    struct _AllJobTypeCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = AllJobTypeCell

      let bundle = R.hostingBundle
      let identifier = "AllJobTypeCell"
      let name = "AllJobTypeCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AllJobTypeCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AllJobTypeCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "grey_right", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'grey_right' is used in nib 'AllJobTypeCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "THEME_COLOR", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'THEME_COLOR' is used in nib 'AllJobTypeCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _BookingCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = BookingCell

      let bundle = R.hostingBundle
      let identifier = "BookingCell"
      let name = "BookingCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> BookingCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? BookingCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "wine-connection-suntec-city 2", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'wine-connection-suntec-city 2' is used in nib 'BookingCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "BUTTON_COLOR", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'BUTTON_COLOR' is used in nib 'BookingCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "DARK_GREY", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'DARK_GREY' is used in nib 'BookingCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "GREEN", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'GREEN' is used in nib 'BookingCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "LIGHTGRAY", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'LIGHTGRAY' is used in nib 'BookingCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _ClientListCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = ClientListCell

      let bundle = R.hostingBundle
      let identifier = "ClientListCell"
      let name = "ClientListCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ClientListCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ClientListCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "unfav", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'unfav' is used in nib 'ClientListCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "wine-connection-suntec-city 2", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'wine-connection-suntec-city 2' is used in nib 'ClientListCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "BUTTON_COLOR", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'BUTTON_COLOR' is used in nib 'ClientListCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "DARK_GREY", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'DARK_GREY' is used in nib 'ClientListCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "GREEN", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'GREEN' is used in nib 'ClientListCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _CurrentShiftCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = CurrentShiftCell

      let bundle = R.hostingBundle
      let identifier = "CurrentShiftCell"
      let name = "CurrentShiftCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CurrentShiftCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CurrentShiftCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "dot", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'dot' is used in nib 'CurrentShiftCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _DateCalCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = DateCalCell

      let bundle = R.hostingBundle
      let identifier = "DateCalCell"
      let name = "DateCalCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> DateCalCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? DateCalCell
      }

      fileprivate init() {}
    }

    struct _DateCollectionCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = DateCollectionCell

      let bundle = R.hostingBundle
      let identifier = "DateCollectionCell"
      let name = "DateCollectionCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> DateCollectionCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? DateCollectionCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Close Booking", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Close Booking' is used in nib 'DateCollectionCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "BUTTON_COLOR", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'BUTTON_COLOR' is used in nib 'DateCollectionCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "GREEN", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'GREEN' is used in nib 'DateCollectionCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _DateWiseCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = DateWiseCell

      let bundle = R.hostingBundle
      let identifier = "DateWiseCell"
      let name = "DateWiseCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> DateWiseCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? DateWiseCell
      }

      fileprivate init() {}
    }

    struct _JobRequestCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = JobRequestCell

      let bundle = R.hostingBundle
      let identifier = "JobRequestCell"
      let name = "JobRequestCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> JobRequestCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? JobRequestCell
      }

      fileprivate init() {}
    }

    struct _ManpowerCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = ManpowerCell

      let bundle = R.hostingBundle
      let identifier = "ManpowerCell"
      let name = "ManpowerCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ManpowerCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ManpowerCell
      }

      static func validate() throws {
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "dollarsign.circle.fill") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'dollarsign.circle.fill' is used in nib 'ManpowerCell', but couldn't be loaded.") } }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "hourglass") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'hourglass' is used in nib 'ManpowerCell', but couldn't be loaded.") } }
        if UIKit.UIImage(named: "profile", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'profile' is used in nib 'ManpowerCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "right-arrow (1) 2", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'right-arrow (1) 2' is used in nib 'ManpowerCell', but couldn't be loaded.") }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "suitcase.fill") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'suitcase.fill' is used in nib 'ManpowerCell', but couldn't be loaded.") } }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "BUTTON_COLOR", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'BUTTON_COLOR' is used in nib 'ManpowerCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "DARK_GREY", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'DARK_GREY' is used in nib 'ManpowerCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "GREEN", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'GREEN' is used in nib 'ManpowerCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "LIGHTGRAY", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'LIGHTGRAY' is used in nib 'ManpowerCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _MultiDateCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = MultiDateCell

      let bundle = R.hostingBundle
      let identifier = "MultiDateCell"
      let name = "MultiDateCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MultiDateCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MultiDateCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "cancel_black", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'cancel_black' is used in nib 'MultiDateCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _PreviousWorkerCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = PreviousWorkerCell

      let bundle = R.hostingBundle
      let identifier = "PreviousWorkerCell"
      let name = "PreviousWorkerCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PreviousWorkerCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PreviousWorkerCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "check01", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'check01' is used in nib 'PreviousWorkerCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "je pic 1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'je pic 1' is used in nib 'PreviousWorkerCell', but couldn't be loaded.") }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "suitcase.fill") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'suitcase.fill' is used in nib 'PreviousWorkerCell', but couldn't be loaded.") } }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "DARK_GREY", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'DARK_GREY' is used in nib 'PreviousWorkerCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "LIGHTGRAY", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'LIGHTGRAY' is used in nib 'PreviousWorkerCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _SaveCardCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = SaveCardCell

      let bundle = R.hostingBundle
      let identifier = "SaveCardCell"
      let name = "SaveCardCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SaveCardCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SaveCardCell
      }

      fileprivate init() {}
    }

    struct _ShiftCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = ShiftCell

      let bundle = R.hostingBundle
      let identifier = "ShiftCell"
      let name = "ShiftCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ShiftCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ShiftCell
      }

      fileprivate init() {}
    }

    struct _SubShiftCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "SubShiftCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SubShiftCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SubShiftCell
      }

      static func validate() throws {
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "hourglass") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'hourglass' is used in nib 'SubShiftCell', but couldn't be loaded.") } }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "BLACK", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'BLACK' is used in nib 'SubShiftCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "DARK_GREY", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'DARK_GREY' is used in nib 'SubShiftCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "LIGHTGRAY", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'LIGHTGRAY' is used in nib 'SubShiftCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "THEME_COLOR", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'THEME_COLOR' is used in nib 'SubShiftCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _TopBar: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "TopBar"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TopBar? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TopBar
      }

      static func validate() throws {
        if UIKit.UIImage(named: "logo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'logo' is used in nib 'TopBar', but couldn't be loaded.") }
        if UIKit.UIImage(named: "menu", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'menu' is used in nib 'TopBar', but couldn't be loaded.") }
        if UIKit.UIImage(named: "messages", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'messages' is used in nib 'TopBar', but couldn't be loaded.") }
        if UIKit.UIImage(named: "notifications", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'notifications' is used in nib 'TopBar', but couldn't be loaded.") }
        if UIKit.UIImage(named: "star", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'star' is used in nib 'TopBar', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "BUTTON_COLOR", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'BUTTON_COLOR' is used in nib 'TopBar', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _UpcomingShiftCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "UpcomingShiftCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UpcomingShiftCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UpcomingShiftCell
      }

      fileprivate init() {}
    }

    struct _UserRatingCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = UserRatingCell

      let bundle = R.hostingBundle
      let identifier = "UserRatingCell"
      let name = "UserRatingCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UserRatingCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UserRatingCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "wine-connection-suntec-city 2", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'wine-connection-suntec-city 2' is used in nib 'UserRatingCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "GREEN", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'GREEN' is used in nib 'UserRatingCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "LIGHTGRAY", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'LIGHTGRAY' is used in nib 'UserRatingCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _WeeklyRateCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "WeeklyRateCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> WeeklyRateCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? WeeklyRateCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "delete_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'delete_ic' is used in nib 'WeeklyRateCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "minus circle 2", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'minus circle 2' is used in nib 'WeeklyRateCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "plus circle 1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'plus circle 1' is used in nib 'WeeklyRateCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "BLACK", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'BLACK' is used in nib 'WeeklyRateCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "THEME_COLOR", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'THEME_COLOR' is used in nib 'WeeklyRateCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _WorkerShiftTimeCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = WorkerShiftTimeCell

      let bundle = R.hostingBundle
      let identifier = "WorkerShiftTimeCell"
      let name = "WorkerShiftTimeCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> WorkerShiftTimeCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? WorkerShiftTimeCell
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try main.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if UIKit.UIImage(named: "splashback", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'splashback' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if UIKit.UIImage(named: "white_logo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'white_logo' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController

      let addAdminVC = StoryboardViewControllerResource<AddAdminVC>(identifier: "AddAdminVC")
      let addRatingReviewVC = StoryboardViewControllerResource<AddRatingReviewVC>(identifier: "AddRatingReviewVC")
      let bookingCompleteDetailVC = StoryboardViewControllerResource<BookingCompleteDetailVC>(identifier: "BookingCompleteDetailVC")
      let bookingDetailVC = StoryboardViewControllerResource<BookingDetailVC>(identifier: "BookingDetailVC")
      let bookingRequestVC = StoryboardViewControllerResource<BookingRequestVC>(identifier: "BookingRequestVC")
      let bundle = R.hostingBundle
      let calenderPickervC = StoryboardViewControllerResource<CalenderPickervC>(identifier: "CalenderPickervC")
      let changePAssVC = StoryboardViewControllerResource<ChangePAssVC>(identifier: "ChangePAssVC")
      let chatConversationVC = StoryboardViewControllerResource<ChatConversationVC>(identifier: "ChatConversationVC")
      let clientJobVC = StoryboardViewControllerResource<ClientJobVC>(identifier: "ClientJobVC")
      let clientSigningDetailVC = StoryboardViewControllerResource<ClientSigningDetailVC>(identifier: "ClientSigningDetailVC")
      let confirmJobPostVC = StoryboardViewControllerResource<ConfirmJobPostVC>(identifier: "ConfirmJobPostVC")
      let currentShiftVC = StoryboardViewControllerResource<CurrentShiftVC>(identifier: "CurrentShiftVC")
      let editProfileVC = StoryboardViewControllerResource<EditProfileVC>(identifier: "EditProfileVC")
      let forgotPasswordVC = StoryboardViewControllerResource<ForgotPasswordVC>(identifier: "ForgotPasswordVC")
      let historyVC = StoryboardViewControllerResource<HistoryVC>(identifier: "HistoryVC")
      let homeVC = StoryboardViewControllerResource<HomeVC>(identifier: "HomeVC")
      let jobConfirmedVC = StoryboardViewControllerResource<JobConfirmedVC>(identifier: "JobConfirmedVC")
      let landingVC = StoryboardViewControllerResource<LandingVC>(identifier: "LandingVC")
      let listAdminVC = StoryboardViewControllerResource<listAdminVC>(identifier: "listAdminVC")
      let loginTypeVC = StoryboardViewControllerResource<LoginTypeVC>(identifier: "LoginTypeVC")
      let loginVC = StoryboardViewControllerResource<LoginVC>(identifier: "LoginVC")
      let name = "Main"
      let newBookingVC = StoryboardViewControllerResource<NewBookingVC>(identifier: "NewBookingVC")
      let notificationVC = StoryboardViewControllerResource<NotificationVC>(identifier: "NotificationVC")
      let otpVC = StoryboardViewControllerResource<OtpVC>(identifier: "OtpVC")
      let passwordOtpVC = StoryboardViewControllerResource<PasswordOtpVC>(identifier: "PasswordOtpVC")
      let paymentVC = StoryboardViewControllerResource<PaymentVC>(identifier: "PaymentVC")
      let popClockInVC = StoryboardViewControllerResource<PopClockInVC>(identifier: "PopClockInVC")
      let popNRIC = StoryboardViewControllerResource<PopNRIC>(identifier: "PopNRIC")
      let popPasswordChangedVC = StoryboardViewControllerResource<PopPasswordChangedVC>(identifier: "PopPasswordChangedVC")
      let popUPNoBreakVC = StoryboardViewControllerResource<PopUPNoBreakVC>(identifier: "PopUPNoBreakVC")
      let popUpApprovalVC = StoryboardViewControllerResource<PopUpApprovalVC>(identifier: "PopUpApprovalVC")
      let popUpBeforeBooking = StoryboardViewControllerResource<PopUpBeforeBooking>(identifier: "PopUpBeforeBooking")
      let popUpBookingConfirmVC = StoryboardViewControllerResource<PopUpBookingConfirmVC>(identifier: "PopUpBookingConfirmVC")
      let popUpRejectVC = StoryboardViewControllerResource<PopUpRejectVC>(identifier: "PopUpRejectVC")
      let popUpSameVC = StoryboardViewControllerResource<PopUpSameVC>(identifier: "PopUpSameVC")
      let popUpSimpleVC = StoryboardViewControllerResource<PopUpSimpleVC>(identifier: "PopUpSimpleVC")
      let popUpVC = StoryboardViewControllerResource<PopUpVC>(identifier: "PopUpVC")
      let popupjobTypeVC = StoryboardViewControllerResource<PopupjobTypeVC>(identifier: "PopupjobTypeVC")
      let profileSettingVC = StoryboardViewControllerResource<ProfileSettingVC>(identifier: "ProfileSettingVC")
      let publishJobVC = StoryboardViewControllerResource<PublishJobVC>(identifier: "PublishJobVC")
      let referFriendVC = StoryboardViewControllerResource<ReferFriendVC>(identifier: "ReferFriendVC")
      let registrationSuccessVC = StoryboardViewControllerResource<RegistrationSuccessVC>(identifier: "RegistrationSuccessVC")
      let requestByDateVC = StoryboardViewControllerResource<RequestByDateVC>(identifier: "RequestByDateVC")
      let requestVC = StoryboardViewControllerResource<RequestVC>(identifier: "RequestVC")
      let resetPasswordVC = StoryboardViewControllerResource<ResetPasswordVC>(identifier: "ResetPasswordVC")
      let sameDayRequestVC = StoryboardViewControllerResource<SameDayRequestVC>(identifier: "SameDayRequestVC")
      let saveCardVC = StoryboardViewControllerResource<SaveCardVC>(identifier: "SaveCardVC")
      let selectAllJobTypesVC = StoryboardViewControllerResource<SelectAllJobTypesVC>(identifier: "SelectAllJobTypesVC")
      let setCustomDateRateVC = StoryboardViewControllerResource<SetCustomDateRateVC>(identifier: "SetCustomDateRateVC")
      let setRateVC = StoryboardViewControllerResource<SetRateVC>(identifier: "SetRateVC")
      let tabBarClientVC = StoryboardViewControllerResource<TabBarClientVC>(identifier: "TabBarClientVC")
      let termsAndCondVC = StoryboardViewControllerResource<TermsAndCondVC>(identifier: "TermsAndCondVC")
      let updateJobPublishVC = StoryboardViewControllerResource<UpdateJobPublishVC>(identifier: "UpdateJobPublishVC")
      let urgentBookingVC = StoryboardViewControllerResource<UrgentBookingVC>(identifier: "UrgentBookingVC")
      let userChat = StoryboardViewControllerResource<UserChat>(identifier: "UserChat")
      let userRatingVC = StoryboardViewControllerResource<UserRatingVC>(identifier: "UserRatingVC")
      let userTabBar = StoryboardViewControllerResource<UserTabBar>(identifier: "UserTabBar")
      let walletTypeVC = StoryboardViewControllerResource<WalletTypeVC>(identifier: "WalletTypeVC")
      let walletVC = StoryboardViewControllerResource<WalletVC>(identifier: "WalletVC")
      let wishlistVC = StoryboardViewControllerResource<WishlistVC>(identifier: "WishlistVC")
      let workerSigningDetailVC = StoryboardViewControllerResource<WorkerSigningDetailVC>(identifier: "WorkerSigningDetailVC")

      func addAdminVC(_: Void = ()) -> AddAdminVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: addAdminVC)
      }

      func addRatingReviewVC(_: Void = ()) -> AddRatingReviewVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: addRatingReviewVC)
      }

      func bookingCompleteDetailVC(_: Void = ()) -> BookingCompleteDetailVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: bookingCompleteDetailVC)
      }

      func bookingDetailVC(_: Void = ()) -> BookingDetailVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: bookingDetailVC)
      }

      func bookingRequestVC(_: Void = ()) -> BookingRequestVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: bookingRequestVC)
      }

      func calenderPickervC(_: Void = ()) -> CalenderPickervC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: calenderPickervC)
      }

      func changePAssVC(_: Void = ()) -> ChangePAssVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: changePAssVC)
      }

      func chatConversationVC(_: Void = ()) -> ChatConversationVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: chatConversationVC)
      }

      func clientJobVC(_: Void = ()) -> ClientJobVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: clientJobVC)
      }

      func clientSigningDetailVC(_: Void = ()) -> ClientSigningDetailVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: clientSigningDetailVC)
      }

      func confirmJobPostVC(_: Void = ()) -> ConfirmJobPostVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: confirmJobPostVC)
      }

      func currentShiftVC(_: Void = ()) -> CurrentShiftVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: currentShiftVC)
      }

      func editProfileVC(_: Void = ()) -> EditProfileVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: editProfileVC)
      }

      func forgotPasswordVC(_: Void = ()) -> ForgotPasswordVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: forgotPasswordVC)
      }

      func historyVC(_: Void = ()) -> HistoryVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: historyVC)
      }

      func homeVC(_: Void = ()) -> HomeVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: homeVC)
      }

      func jobConfirmedVC(_: Void = ()) -> JobConfirmedVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: jobConfirmedVC)
      }

      func landingVC(_: Void = ()) -> LandingVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: landingVC)
      }

      func listAdminVC(_: Void = ()) -> listAdminVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: listAdminVC)
      }

      func loginTypeVC(_: Void = ()) -> LoginTypeVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: loginTypeVC)
      }

      func loginVC(_: Void = ()) -> LoginVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: loginVC)
      }

      func newBookingVC(_: Void = ()) -> NewBookingVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: newBookingVC)
      }

      func notificationVC(_: Void = ()) -> NotificationVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: notificationVC)
      }

      func otpVC(_: Void = ()) -> OtpVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: otpVC)
      }

      func passwordOtpVC(_: Void = ()) -> PasswordOtpVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: passwordOtpVC)
      }

      func paymentVC(_: Void = ()) -> PaymentVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: paymentVC)
      }

      func popClockInVC(_: Void = ()) -> PopClockInVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: popClockInVC)
      }

      func popNRIC(_: Void = ()) -> PopNRIC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: popNRIC)
      }

      func popPasswordChangedVC(_: Void = ()) -> PopPasswordChangedVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: popPasswordChangedVC)
      }

      func popUPNoBreakVC(_: Void = ()) -> PopUPNoBreakVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: popUPNoBreakVC)
      }

      func popUpApprovalVC(_: Void = ()) -> PopUpApprovalVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: popUpApprovalVC)
      }

      func popUpBeforeBooking(_: Void = ()) -> PopUpBeforeBooking? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: popUpBeforeBooking)
      }

      func popUpBookingConfirmVC(_: Void = ()) -> PopUpBookingConfirmVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: popUpBookingConfirmVC)
      }

      func popUpRejectVC(_: Void = ()) -> PopUpRejectVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: popUpRejectVC)
      }

      func popUpSameVC(_: Void = ()) -> PopUpSameVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: popUpSameVC)
      }

      func popUpSimpleVC(_: Void = ()) -> PopUpSimpleVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: popUpSimpleVC)
      }

      func popUpVC(_: Void = ()) -> PopUpVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: popUpVC)
      }

      func popupjobTypeVC(_: Void = ()) -> PopupjobTypeVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: popupjobTypeVC)
      }

      func profileSettingVC(_: Void = ()) -> ProfileSettingVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: profileSettingVC)
      }

      func publishJobVC(_: Void = ()) -> PublishJobVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: publishJobVC)
      }

      func referFriendVC(_: Void = ()) -> ReferFriendVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: referFriendVC)
      }

      func registrationSuccessVC(_: Void = ()) -> RegistrationSuccessVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: registrationSuccessVC)
      }

      func requestByDateVC(_: Void = ()) -> RequestByDateVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: requestByDateVC)
      }

      func requestVC(_: Void = ()) -> RequestVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: requestVC)
      }

      func resetPasswordVC(_: Void = ()) -> ResetPasswordVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: resetPasswordVC)
      }

      func sameDayRequestVC(_: Void = ()) -> SameDayRequestVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: sameDayRequestVC)
      }

      func saveCardVC(_: Void = ()) -> SaveCardVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: saveCardVC)
      }

      func selectAllJobTypesVC(_: Void = ()) -> SelectAllJobTypesVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: selectAllJobTypesVC)
      }

      func setCustomDateRateVC(_: Void = ()) -> SetCustomDateRateVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: setCustomDateRateVC)
      }

      func setRateVC(_: Void = ()) -> SetRateVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: setRateVC)
      }

      func tabBarClientVC(_: Void = ()) -> TabBarClientVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: tabBarClientVC)
      }

      func termsAndCondVC(_: Void = ()) -> TermsAndCondVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: termsAndCondVC)
      }

      func updateJobPublishVC(_: Void = ()) -> UpdateJobPublishVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: updateJobPublishVC)
      }

      func urgentBookingVC(_: Void = ()) -> UrgentBookingVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: urgentBookingVC)
      }

      func userChat(_: Void = ()) -> UserChat? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: userChat)
      }

      func userRatingVC(_: Void = ()) -> UserRatingVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: userRatingVC)
      }

      func userTabBar(_: Void = ()) -> UserTabBar? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: userTabBar)
      }

      func walletTypeVC(_: Void = ()) -> WalletTypeVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: walletTypeVC)
      }

      func walletVC(_: Void = ()) -> WalletVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: walletVC)
      }

      func wishlistVC(_: Void = ()) -> WishlistVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: wishlistVC)
      }

      func workerSigningDetailVC(_: Void = ()) -> WorkerSigningDetailVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: workerSigningDetailVC)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Accepted", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Accepted' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Back 1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Back 1' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Back 2", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Back 2' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "BlueCirclecheck ", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'BlueCirclecheck ' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Booking", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Booking' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Busines", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Busines' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Call", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Call' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Country", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Country' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Dollar", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Dollar' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Ellipse 11", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Ellipse 11' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Ellipse 9", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Ellipse 9' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Email", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Email' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Password", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Password' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Plus18", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Plus18' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Profile", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Profile' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Profile_Pla", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Profile_Pla' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "RectangleUncheck", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'RectangleUncheck' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Req", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Req' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Req1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Req1' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Search", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Search' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Uncheck", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Uncheck' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "americanexpress", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'americanexpress' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "authorisedapprvar", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'authorisedapprvar' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "back", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'back' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "cancel_black", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'cancel_black' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "card_amex", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'card_amex' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "chat_b2", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'chat_b2' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "chat_b21", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'chat_b21' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "check-green 2", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'check-green 2' is used in storyboard 'Main', but couldn't be loaded.") }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "chevron.down") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'chevron.down' is used in storyboard 'Main', but couldn't be loaded.") } }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "chevron.right") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'chevron.right' is used in storyboard 'Main', but couldn't be loaded.") } }
        if UIKit.UIImage(named: "chevron_down.png", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'chevron_down.png' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "darroe", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'darroe' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "dot", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'dot' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "edit", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'edit' is used in storyboard 'Main', but couldn't be loaded.") }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "eye") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'eye' is used in storyboard 'Main', but couldn't be loaded.") } }
        if UIKit.UIImage(named: "for-workers 1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'for-workers 1' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "history 2", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'history 2' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "logo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'logo' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "mastercard", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'mastercard' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "minus circle 2", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'minus circle 2' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "my_filter (1)", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'my_filter (1)' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "otp 1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'otp 1' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "outletadmin", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'outletadmin' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "pin (1) 1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'pin (1) 1' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "placeholder", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'placeholder' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "plus", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'plus' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "plus circle 1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'plus circle 1' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "plus1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'plus1' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "profile_active", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'profile_active' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "referfriend", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'referfriend' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "right-arrow (1) 2", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'right-arrow (1) 2' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "send-message 1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'send-message 1' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "star", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'star' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "unfav24", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'unfav24' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "upload_image", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'upload_image' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "visa", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'visa' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "waller1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'waller1' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "wallet-filled-money-tool 1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'wallet-filled-money-tool 1' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "wallet_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'wallet_ic' is used in storyboard 'Main', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "BG_COLOR", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'BG_COLOR' is used in storyboard 'Main', but couldn't be loaded.") }
          if UIKit.UIColor(named: "BLACK", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'BLACK' is used in storyboard 'Main', but couldn't be loaded.") }
          if UIKit.UIColor(named: "BORDER", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'BORDER' is used in storyboard 'Main', but couldn't be loaded.") }
          if UIKit.UIColor(named: "BUTTON_COLOR", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'BUTTON_COLOR' is used in storyboard 'Main', but couldn't be loaded.") }
          if UIKit.UIColor(named: "BlackBG", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'BlackBG' is used in storyboard 'Main', but couldn't be loaded.") }
          if UIKit.UIColor(named: "DARK_GREY", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'DARK_GREY' is used in storyboard 'Main', but couldn't be loaded.") }
          if UIKit.UIColor(named: "GREEN", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'GREEN' is used in storyboard 'Main', but couldn't be loaded.") }
          if UIKit.UIColor(named: "Grey", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Grey' is used in storyboard 'Main', but couldn't be loaded.") }
          if UIKit.UIColor(named: "LIGHTGRAY", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'LIGHTGRAY' is used in storyboard 'Main', but couldn't be loaded.") }
          if UIKit.UIColor(named: "StartColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'StartColor' is used in storyboard 'Main', but couldn't be loaded.") }
          if UIKit.UIColor(named: "TEXTCOLOR", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'TEXTCOLOR' is used in storyboard 'Main', but couldn't be loaded.") }
          if UIKit.UIColor(named: "THEME_COLOR", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'THEME_COLOR' is used in storyboard 'Main', but couldn't be loaded.") }
          if UIKit.UIColor(named: "WHITE", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'WHITE' is used in storyboard 'Main', but couldn't be loaded.") }
          if UIKit.UIColor(named: "WhiteBG", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'WhiteBG' is used in storyboard 'Main', but couldn't be loaded.") }
          if UIKit.UIColor(named: "gray", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'gray' is used in storyboard 'Main', but couldn't be loaded.") }
        }
        if _R.storyboard.main().addAdminVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'addAdminVC' could not be loaded from storyboard 'Main' as 'AddAdminVC'.") }
        if _R.storyboard.main().addRatingReviewVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'addRatingReviewVC' could not be loaded from storyboard 'Main' as 'AddRatingReviewVC'.") }
        if _R.storyboard.main().bookingCompleteDetailVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'bookingCompleteDetailVC' could not be loaded from storyboard 'Main' as 'BookingCompleteDetailVC'.") }
        if _R.storyboard.main().bookingDetailVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'bookingDetailVC' could not be loaded from storyboard 'Main' as 'BookingDetailVC'.") }
        if _R.storyboard.main().bookingRequestVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'bookingRequestVC' could not be loaded from storyboard 'Main' as 'BookingRequestVC'.") }
        if _R.storyboard.main().calenderPickervC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'calenderPickervC' could not be loaded from storyboard 'Main' as 'CalenderPickervC'.") }
        if _R.storyboard.main().changePAssVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'changePAssVC' could not be loaded from storyboard 'Main' as 'ChangePAssVC'.") }
        if _R.storyboard.main().chatConversationVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'chatConversationVC' could not be loaded from storyboard 'Main' as 'ChatConversationVC'.") }
        if _R.storyboard.main().clientJobVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'clientJobVC' could not be loaded from storyboard 'Main' as 'ClientJobVC'.") }
        if _R.storyboard.main().clientSigningDetailVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'clientSigningDetailVC' could not be loaded from storyboard 'Main' as 'ClientSigningDetailVC'.") }
        if _R.storyboard.main().confirmJobPostVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'confirmJobPostVC' could not be loaded from storyboard 'Main' as 'ConfirmJobPostVC'.") }
        if _R.storyboard.main().currentShiftVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'currentShiftVC' could not be loaded from storyboard 'Main' as 'CurrentShiftVC'.") }
        if _R.storyboard.main().editProfileVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'editProfileVC' could not be loaded from storyboard 'Main' as 'EditProfileVC'.") }
        if _R.storyboard.main().forgotPasswordVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'forgotPasswordVC' could not be loaded from storyboard 'Main' as 'ForgotPasswordVC'.") }
        if _R.storyboard.main().historyVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'historyVC' could not be loaded from storyboard 'Main' as 'HistoryVC'.") }
        if _R.storyboard.main().homeVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'homeVC' could not be loaded from storyboard 'Main' as 'HomeVC'.") }
        if _R.storyboard.main().jobConfirmedVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'jobConfirmedVC' could not be loaded from storyboard 'Main' as 'JobConfirmedVC'.") }
        if _R.storyboard.main().landingVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'landingVC' could not be loaded from storyboard 'Main' as 'LandingVC'.") }
        if _R.storyboard.main().loginTypeVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'loginTypeVC' could not be loaded from storyboard 'Main' as 'LoginTypeVC'.") }
        if _R.storyboard.main().loginVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'loginVC' could not be loaded from storyboard 'Main' as 'LoginVC'.") }
        if _R.storyboard.main().newBookingVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'newBookingVC' could not be loaded from storyboard 'Main' as 'NewBookingVC'.") }
        if _R.storyboard.main().notificationVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'notificationVC' could not be loaded from storyboard 'Main' as 'NotificationVC'.") }
        if _R.storyboard.main().otpVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'otpVC' could not be loaded from storyboard 'Main' as 'OtpVC'.") }
        if _R.storyboard.main().passwordOtpVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'passwordOtpVC' could not be loaded from storyboard 'Main' as 'PasswordOtpVC'.") }
        if _R.storyboard.main().paymentVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'paymentVC' could not be loaded from storyboard 'Main' as 'PaymentVC'.") }
        if _R.storyboard.main().popClockInVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'popClockInVC' could not be loaded from storyboard 'Main' as 'PopClockInVC'.") }
        if _R.storyboard.main().popNRIC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'popNRIC' could not be loaded from storyboard 'Main' as 'PopNRIC'.") }
        if _R.storyboard.main().popPasswordChangedVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'popPasswordChangedVC' could not be loaded from storyboard 'Main' as 'PopPasswordChangedVC'.") }
        if _R.storyboard.main().popUPNoBreakVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'popUPNoBreakVC' could not be loaded from storyboard 'Main' as 'PopUPNoBreakVC'.") }
        if _R.storyboard.main().popUpApprovalVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'popUpApprovalVC' could not be loaded from storyboard 'Main' as 'PopUpApprovalVC'.") }
        if _R.storyboard.main().popUpBeforeBooking() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'popUpBeforeBooking' could not be loaded from storyboard 'Main' as 'PopUpBeforeBooking'.") }
        if _R.storyboard.main().popUpBookingConfirmVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'popUpBookingConfirmVC' could not be loaded from storyboard 'Main' as 'PopUpBookingConfirmVC'.") }
        if _R.storyboard.main().popUpRejectVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'popUpRejectVC' could not be loaded from storyboard 'Main' as 'PopUpRejectVC'.") }
        if _R.storyboard.main().popUpSameVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'popUpSameVC' could not be loaded from storyboard 'Main' as 'PopUpSameVC'.") }
        if _R.storyboard.main().popUpSimpleVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'popUpSimpleVC' could not be loaded from storyboard 'Main' as 'PopUpSimpleVC'.") }
        if _R.storyboard.main().popUpVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'popUpVC' could not be loaded from storyboard 'Main' as 'PopUpVC'.") }
        if _R.storyboard.main().popupjobTypeVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'popupjobTypeVC' could not be loaded from storyboard 'Main' as 'PopupjobTypeVC'.") }
        if _R.storyboard.main().profileSettingVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'profileSettingVC' could not be loaded from storyboard 'Main' as 'ProfileSettingVC'.") }
        if _R.storyboard.main().publishJobVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'publishJobVC' could not be loaded from storyboard 'Main' as 'PublishJobVC'.") }
        if _R.storyboard.main().referFriendVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'referFriendVC' could not be loaded from storyboard 'Main' as 'ReferFriendVC'.") }
        if _R.storyboard.main().registrationSuccessVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'registrationSuccessVC' could not be loaded from storyboard 'Main' as 'RegistrationSuccessVC'.") }
        if _R.storyboard.main().requestByDateVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'requestByDateVC' could not be loaded from storyboard 'Main' as 'RequestByDateVC'.") }
        if _R.storyboard.main().requestVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'requestVC' could not be loaded from storyboard 'Main' as 'RequestVC'.") }
        if _R.storyboard.main().resetPasswordVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'resetPasswordVC' could not be loaded from storyboard 'Main' as 'ResetPasswordVC'.") }
        if _R.storyboard.main().sameDayRequestVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'sameDayRequestVC' could not be loaded from storyboard 'Main' as 'SameDayRequestVC'.") }
        if _R.storyboard.main().saveCardVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'saveCardVC' could not be loaded from storyboard 'Main' as 'SaveCardVC'.") }
        if _R.storyboard.main().selectAllJobTypesVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'selectAllJobTypesVC' could not be loaded from storyboard 'Main' as 'SelectAllJobTypesVC'.") }
        if _R.storyboard.main().setCustomDateRateVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'setCustomDateRateVC' could not be loaded from storyboard 'Main' as 'SetCustomDateRateVC'.") }
        if _R.storyboard.main().setRateVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'setRateVC' could not be loaded from storyboard 'Main' as 'SetRateVC'.") }
        if _R.storyboard.main().tabBarClientVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'tabBarClientVC' could not be loaded from storyboard 'Main' as 'TabBarClientVC'.") }
        if _R.storyboard.main().termsAndCondVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'termsAndCondVC' could not be loaded from storyboard 'Main' as 'TermsAndCondVC'.") }
        if _R.storyboard.main().updateJobPublishVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'updateJobPublishVC' could not be loaded from storyboard 'Main' as 'UpdateJobPublishVC'.") }
        if _R.storyboard.main().urgentBookingVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'urgentBookingVC' could not be loaded from storyboard 'Main' as 'UrgentBookingVC'.") }
        if _R.storyboard.main().userChat() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'userChat' could not be loaded from storyboard 'Main' as 'UserChat'.") }
        if _R.storyboard.main().userRatingVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'userRatingVC' could not be loaded from storyboard 'Main' as 'UserRatingVC'.") }
        if _R.storyboard.main().userTabBar() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'userTabBar' could not be loaded from storyboard 'Main' as 'UserTabBar'.") }
        if _R.storyboard.main().walletTypeVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'walletTypeVC' could not be loaded from storyboard 'Main' as 'WalletTypeVC'.") }
        if _R.storyboard.main().walletVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'walletVC' could not be loaded from storyboard 'Main' as 'WalletVC'.") }
        if _R.storyboard.main().wishlistVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'wishlistVC' could not be loaded from storyboard 'Main' as 'WishlistVC'.") }
        if _R.storyboard.main().workerSigningDetailVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'workerSigningDetailVC' could not be loaded from storyboard 'Main' as 'WorkerSigningDetailVC'.") }
        if _R.storyboard.main().listAdminVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'listAdminVC' could not be loaded from storyboard 'Main' as 'listAdminVC'.") }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
